/* The following code was generated by JFlex 1.4.3 on 6/17/13 11:25 PM */

package org.livescriptidea.lang.lexer;


import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.livescriptidea.lang.lexer.LiveScriptTokenTypes;
import java.util.Stack;

/**
 * The LiveScript lexer is responsible for generating a token stream of any LiveScript source file.
 *
 * @author Rack Lin
 * @since 0.1.0
 */

public class LiveScriptLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYCLASSNAME = 28;
  public static final int YYSINGLEQUOTEHEREDOC = 14;
  public static final int YYDOUBLEQUOTEHEREDOC = 12;
  public static final int YYSINGLEQUOTESTRING = 10;
  public static final int YYREGEX = 16;
  public static final int YYHEREGEX = 18;
  public static final int YYIDENTIFIER = 2;
  public static final int YYINTERPOLATION = 24;
  public static final int YYDOUBLEQUOTESTRING = 8;
  public static final int YYJAVASCRIPT = 6;
  public static final int YYREGEXCHARACTERCLASS = 22;
  public static final int YYNUMBER = 4;
  public static final int YYINITIAL = 0;
  public static final int YYQUOTEPROPERTY = 26;
  public static final int YYREGEXFLAG = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\3\2\0\1\1\22\0\1\100\1\55\1\66\1\101"+
    "\1\10\1\61\1\50\1\67\1\73\1\74\1\60\1\21\1\77\1\16"+
    "\1\17\1\57\1\11\10\103\1\6\1\23\1\76\1\56\1\54\1\24"+
    "\1\53\1\65\6\15\10\7\1\47\1\46\7\7\1\13\2\7\1\71"+
    "\1\2\1\72\1\52\1\22\1\70\1\26\1\14\1\25\1\30\1\20"+
    "\1\31\1\104\1\43\1\36\1\5\1\64\1\33\1\44\1\35\1\37"+
    "\1\45\1\5\1\41\1\27\1\34\1\32\1\40\1\42\1\12\1\62"+
    "\1\5\1\75\1\51\1\102\1\63\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\4\1\5\1\4\1\7\1\10\1\4\1\11\1\4"+
    "\1\12\1\13\16\4\3\14\1\15\1\16\1\13\1\1"+
    "\1\17\1\4\1\16\1\20\1\21\1\22\1\1\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\1\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\37"+
    "\1\1\1\52\1\53\1\54\1\53\1\55\1\56\2\57"+
    "\2\60\1\61\2\53\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\2\70\1\71\1\53\1\72\1\73\1\74\1\75"+
    "\1\53\1\76\1\1\1\10\16\1\1\37\1\1\3\0"+
    "\1\77\1\0\1\4\1\100\1\101\1\102\1\0\4\4"+
    "\1\0\1\13\6\4\1\16\14\4\1\103\1\13\1\104"+
    "\1\105\1\4\1\106\1\103\1\14\5\4\1\0\1\107"+
    "\1\110\1\107\1\111\1\4\1\112\2\0\1\113\20\0"+
    "\1\114\1\0\1\115\1\116\4\117\1\57\1\60\1\62"+
    "\1\120\1\32\1\121\1\73\1\122\1\0\1\123\21\0"+
    "\3\123\3\0\2\124\1\0\2\5\1\0\1\5\1\4"+
    "\1\125\1\126\15\4\1\14\6\4\1\127\3\4\1\130"+
    "\1\4\1\131\15\4\2\0\1\132\1\133\2\0\1\134"+
    "\27\0\3\117\1\135\1\62\1\73\23\0\2\136\3\4"+
    "\1\137\20\4\1\140\1\20\3\4\1\13\2\4\1\141"+
    "\1\4\1\142\1\0\1\143\21\0\1\62\1\73\12\0"+
    "\1\144\5\4\1\145\1\146\10\4\1\147\1\150\3\4"+
    "\1\151\12\0\1\62\6\0\5\4\1\152\3\4\1\153"+
    "\1\16\1\4\1\154\12\0\1\155\5\4\1\156\1\4"+
    "\1\16\1\4\5\0\3\4\1\157\2\4\1\0\1\4"+
    "\1\160";

  private static int [] zzUnpackAction() {
    int [] result = new int[503];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee"+
    "\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u040b\0\u07d1"+
    "\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9"+
    "\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21"+
    "\0\u0747\0\u0c66\0\u0c66\0\u0cab\0\u0cf0\0\u0747\0\u0d35\0\u0d7a"+
    "\0\u040b\0\u0dbf\0\u0e04\0\u0e49\0\u040b\0\u040b\0\u040b\0\u040b"+
    "\0\u040b\0\u040b\0\u040b\0\u0e8e\0\u040b\0\u040b\0\u0ed3\0\u0f18"+
    "\0\u040b\0\u0f5d\0\u040b\0\u0fa2\0\u040b\0\u040b\0\u040b\0\u040b"+
    "\0\u040b\0\u040b\0\u040b\0\u040b\0\u040b\0\u0fe7\0\u102c\0\u1071"+
    "\0\u10b6\0\u10fb\0\u040b\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254"+
    "\0\u1299\0\u040b\0\u12de\0\u1323\0\u040b\0\u040b\0\u040b\0\u040b"+
    "\0\u040b\0\u1368\0\u13ad\0\u040b\0\u13f2\0\u040b\0\u1437\0\u147c"+
    "\0\u040b\0\u14c1\0\u040b\0\u1506\0\u040b\0\u154b\0\u1590\0\u15d5"+
    "\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd"+
    "\0\u1842\0\u1887\0\u18cc\0\u1911\0\u0fa2\0\u1956\0\u199b\0\u19e0"+
    "\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u040b\0\u040b\0\u1b39\0\u1b7e"+
    "\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u040b\0\u1cd7\0\u1d1c\0\u1d61"+
    "\0\u1da6\0\u1deb\0\u1e30\0\u1af4\0\u1e75\0\u1eba\0\u1eff\0\u1f44"+
    "\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c"+
    "\0\u21b1\0\u21f6\0\u1af4\0\u223b\0\u2280\0\u22c5\0\u1af4\0\u230a"+
    "\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463\0\u0747\0\u040b\0\u040b"+
    "\0\u24a8\0\u24ed\0\u2532\0\u040b\0\u2577\0\u25bc\0\u040b\0\u2601"+
    "\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829"+
    "\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u2a0c\0\u040b"+
    "\0\u2a51\0\u040b\0\u040b\0\u040b\0\u2a96\0\u2adb\0\u2b20\0\u2b65"+
    "\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u040b\0\u2cbe\0\u040b\0\u2d03"+
    "\0\u040b\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6"+
    "\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u310e"+
    "\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1\0\u3336"+
    "\0\u337b\0\u33c0\0\u337b\0\u3405\0\u344a\0\u344a\0\u1a6a\0\u348f"+
    "\0\u1956\0\u040b\0\u34d4\0\u3519\0\u355e\0\u35a3\0\u35e8\0\u362d"+
    "\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u3786\0\u37cb\0\u3810\0\u1af4"+
    "\0\u3855\0\u389a\0\u38df\0\u3924\0\u3969\0\u39ae\0\u1af4\0\u39f3"+
    "\0\u3a38\0\u3a7d\0\u04da\0\u3ac2\0\u1af4\0\u3b07\0\u3b4c\0\u3b91"+
    "\0\u3bd6\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u3db9"+
    "\0\u3dfe\0\u3e43\0\u24a8\0\u3e88\0\u040b\0\u040b\0\u3ecd\0\u3f12"+
    "\0\u040b\0\u3f57\0\u3f9c\0\u3fe1\0\u4026\0\u406b\0\u40b0\0\u40f5"+
    "\0\u413a\0\u417f\0\u41c4\0\u4209\0\u424e\0\u4293\0\u42d8\0\u431d"+
    "\0\u4362\0\u43a7\0\u43ec\0\u4431\0\u4476\0\u44bb\0\u4500\0\u4545"+
    "\0\u458a\0\u45cf\0\u4614\0\u4659\0\u469e\0\u46e3\0\u4728\0\u476d"+
    "\0\u47b2\0\u47f7\0\u483c\0\u4881\0\u48c6\0\u490b\0\u4950\0\u4995"+
    "\0\u49da\0\u4a1f\0\u4a64\0\u4aa9\0\u4aee\0\u4b33\0\u4b78\0\u4bbd"+
    "\0\u33c0\0\u337b\0\u040b\0\u4c02\0\u4c47\0\u4c8c\0\u1af4\0\u4cd1"+
    "\0\u4d16\0\u4d5b\0\u4da0\0\u4de5\0\u4e2a\0\u4e6f\0\u4eb4\0\u4ef9"+
    "\0\u4f3e\0\u4f83\0\u4fc8\0\u500d\0\u5052\0\u5097\0\u50dc\0\u1af4"+
    "\0\u1af4\0\u5121\0\u5166\0\u51ab\0\u04da\0\u51f0\0\u5235\0\u1af4"+
    "\0\u527a\0\u040b\0\u52bf\0\u040b\0\u5304\0\u5349\0\u538e\0\u53d3"+
    "\0\u5418\0\u545d\0\u54a2\0\u54e7\0\u552c\0\u5571\0\u55b6\0\u55fb"+
    "\0\u5640\0\u5685\0\u56ca\0\u570f\0\u5754\0\u5799\0\u040b\0\u57de"+
    "\0\u5823\0\u5868\0\u58ad\0\u58f2\0\u5937\0\u597c\0\u59c1\0\u5a06"+
    "\0\u5a4b\0\u1af4\0\u5a90\0\u5ad5\0\u5b1a\0\u5b5f\0\u5ba4\0\u1af4"+
    "\0\u1af4\0\u5be9\0\u5c2e\0\u5c73\0\u5cb8\0\u5cfd\0\u5d42\0\u5d87"+
    "\0\u5dcc\0\u1af4\0\u1af4\0\u5e11\0\u5e56\0\u5e9b\0\u1af4\0\u5ee0"+
    "\0\u5f25\0\u5f6a\0\u5faf\0\u5ff4\0\u6039\0\u607e\0\u60c3\0\u6108"+
    "\0\u614d\0\u040b\0\u6192\0\u61d7\0\u621c\0\u6261\0\u3267\0\u62a6"+
    "\0\u62eb\0\u6330\0\u6375\0\u63ba\0\u63ff\0\u1af4\0\u6444\0\u6489"+
    "\0\u64ce\0\u1af4\0\u6513\0\u6558\0\u1af4\0\u659d\0\u65e2\0\u6627"+
    "\0\u666c\0\u66b1\0\u66f6\0\u673b\0\u6780\0\u67c5\0\u680a\0\u1af4"+
    "\0\u684f\0\u6894\0\u68d9\0\u691e\0\u6963\0\u1af4\0\u69a8\0\u040b"+
    "\0\u69ed\0\u6a32\0\u6a77\0\u6abc\0\u6b01\0\u6b46\0\u6b8b\0\u6bd0"+
    "\0\u6c15\0\u1af4\0\u6c5a\0\u6c9f\0\u6ce4\0\u6d29\0\u1af4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[503];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\1\21\1\22\1\21\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\24\1\26\1\31\1\26\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\3\24\2\26\1\57\1\60\2\61"+
    "\1\62\1\63\1\64\1\65\2\66\1\67\1\70\1\24"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\23\1\104\1\105\1\25\1\24"+
    "\1\20\1\106\1\107\1\106\1\110\11\20\1\111\1\112"+
    "\1\20\1\113\1\20\1\114\27\20\1\115\1\20\1\116"+
    "\1\20\3\117\7\20\1\120\1\121\1\122\1\123\1\20"+
    "\1\102\1\124\1\110\1\20\1\105\3\20\1\106\1\107"+
    "\1\106\1\110\11\20\1\111\1\125\1\20\1\113\1\20"+
    "\1\114\10\20\1\126\22\20\3\117\7\20\1\120\1\121"+
    "\1\20\1\123\1\20\1\102\1\124\1\110\1\20\1\105"+
    "\2\20\70\127\1\130\14\127\1\131\1\21\1\132\1\21"+
    "\62\131\1\133\16\131\1\134\1\21\1\132\1\21\63\134"+
    "\1\133\15\134\1\135\1\21\1\132\1\21\62\135\1\136"+
    "\16\135\1\137\1\21\1\132\1\21\63\137\1\140\15\137"+
    "\1\141\1\142\1\143\1\142\53\141\1\144\11\141\1\145"+
    "\1\142\1\146\1\147\1\150\4\141\1\151\2\141\1\152"+
    "\1\21\1\132\1\21\53\152\1\153\11\152\1\154\1\142"+
    "\1\146\1\147\1\150\3\152\1\155\1\151\2\152\1\142"+
    "\1\156\1\142\1\156\13\142\1\156\16\142\1\157\5\142"+
    "\1\157\15\142\1\157\6\142\1\156\6\142\1\156\3\142"+
    "\1\157\1\160\1\142\1\143\1\142\66\160\1\161\12\160"+
    "\101\142\1\162\1\163\2\142\3\20\1\0\10\20\1\164"+
    "\2\20\1\165\1\166\4\20\1\167\1\170\1\171\1\172"+
    "\1\173\1\174\1\20\1\175\1\176\1\177\1\200\1\20"+
    "\1\201\1\202\17\20\1\203\23\20\1\106\1\107\1\106"+
    "\1\110\12\20\1\204\3\20\1\205\47\20\1\122\3\20"+
    "\1\124\1\110\4\20\110\0\1\21\105\0\1\23\73\0"+
    "\1\23\11\0\11\24\2\0\1\24\1\0\1\24\1\206"+
    "\1\0\23\24\12\0\1\24\1\0\1\24\16\0\2\24"+
    "\6\0\1\25\2\0\1\25\5\0\1\207\1\210\62\0"+
    "\1\25\6\0\1\211\4\26\1\211\1\26\1\211\1\26"+
    "\2\0\1\211\1\0\1\26\1\206\1\0\21\211\2\26"+
    "\12\0\1\211\1\0\1\211\16\0\1\26\1\211\5\0"+
    "\11\27\2\0\1\27\1\0\1\27\2\0\23\27\12\0"+
    "\1\27\1\0\1\27\16\0\2\27\6\0\1\25\2\0"+
    "\1\25\2\212\3\0\1\207\1\210\62\0\1\25\6\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\206\1\0\14\24"+
    "\1\213\6\24\12\0\1\214\1\0\1\24\16\0\2\24"+
    "\6\0\1\25\2\0\1\25\12\0\1\215\27\0\1\216"+
    "\26\0\1\25\20\0\1\217\72\0\5\24\1\220\3\24"+
    "\2\0\1\24\1\0\1\24\1\206\1\0\6\24\1\221"+
    "\1\24\1\222\12\24\12\0\1\24\1\0\1\24\16\0"+
    "\2\24\54\0\1\216\35\0\11\24\2\0\1\24\1\0"+
    "\1\223\1\206\1\0\23\24\12\0\1\24\1\0\1\24"+
    "\16\0\2\24\24\0\1\224\27\0\1\225\35\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\206\1\0\1\24\1\226"+
    "\4\24\1\227\3\24\1\230\10\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\10\24\1\231\12\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\15\24\1\232\5\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\233\1\0\1\24\1\206\1\0\12\24\1\234\10\24"+
    "\12\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\206\1\0\1\24\1\235"+
    "\3\24\1\236\3\24\1\237\1\240\10\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\10\24\1\241\12\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\242\1\0\1\24\1\206\1\0\23\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\14\24\1\243\1\24\1\244"+
    "\4\24\12\0\1\245\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\246\1\0\1\24\1\206\1\0\1\24"+
    "\1\247\3\24\1\250\4\24\1\251\10\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\2\24\1\252\1\24\1\253"+
    "\3\24\1\254\6\24\1\255\3\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\4\24\1\256\3\24\1\257\3\24"+
    "\1\260\6\24\12\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\206\1\0"+
    "\1\24\1\261\10\24\1\262\10\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\263\1\0"+
    "\1\24\1\206\1\0\23\24\12\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\206\1\0\11\24\1\264\4\24\1\265\4\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\50\0\1\61\3\0"+
    "\1\216\101\0\1\61\2\0\1\216\104\0\1\225\104\0"+
    "\1\225\1\0\1\266\26\0\54\267\1\216\2\267\1\270"+
    "\1\271\17\267\1\272\4\267\5\0\11\24\2\0\1\273"+
    "\1\0\1\24\1\206\1\0\23\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\24\0\1\274\146\0\1\275\105\0"+
    "\1\276\105\0\1\277\14\0\3\104\1\0\101\104\3\0"+
    "\1\106\105\0\1\110\73\0\1\110\20\0\1\300\2\0"+
    "\1\301\1\302\4\0\1\303\1\304\1\305\1\306\1\307"+
    "\1\310\1\0\1\311\1\312\1\313\1\314\1\0\1\315"+
    "\1\316\17\0\1\317\45\0\1\320\117\0\1\321\1\322"+
    "\45\0\70\127\1\0\14\127\70\0\1\323\14\0\1\131"+
    "\3\0\62\131\1\0\16\131\1\324\1\0\1\324\1\21"+
    "\5\324\1\325\1\326\17\324\1\327\50\324\1\325\1\324"+
    "\1\134\3\0\63\134\1\0\15\134\1\135\3\0\102\135"+
    "\3\0\62\135\1\330\16\135\1\137\3\0\102\137\3\0"+
    "\63\137\1\331\15\137\1\141\3\0\53\141\1\0\11\141"+
    "\5\0\4\141\1\0\2\141\1\324\1\0\1\324\1\0"+
    "\5\324\1\325\1\326\17\324\1\327\50\324\1\325\1\324"+
    "\36\0\1\332\5\0\1\332\15\0\1\332\21\0\1\332"+
    "\1\152\3\0\65\152\5\0\3\152\2\0\3\152\3\0"+
    "\53\152\1\333\11\152\5\0\3\152\2\0\2\152\1\334"+
    "\1\0\1\334\1\0\71\334\1\335\7\334\36\0\1\336"+
    "\5\0\1\336\15\0\1\336\21\0\1\336\1\160\3\0"+
    "\66\160\1\0\12\160\75\0\1\337\50\0\1\340\20\0"+
    "\1\341\34\0\1\342\20\0\1\343\77\0\1\344\4\0"+
    "\1\345\3\0\1\346\102\0\1\347\111\0\1\350\62\0"+
    "\1\351\16\0\1\341\73\0\1\352\7\0\1\353\1\354"+
    "\102\0\1\355\110\0\1\356\1\0\1\357\16\0\1\360"+
    "\42\0\1\361\11\0\1\362\4\0\1\363\76\0\1\341"+
    "\3\0\1\364\100\0\1\365\3\0\1\341\3\0\1\341"+
    "\63\0\1\366\127\0\1\367\61\0\1\370\100\0\1\300"+
    "\3\0\1\302\4\0\1\303\1\304\1\305\1\306\1\307"+
    "\1\310\1\0\1\311\1\312\1\313\1\314\1\0\1\315"+
    "\1\316\17\0\1\317\22\0\1\371\1\372\1\371\1\372"+
    "\17\371\1\373\61\371\6\0\1\374\2\0\1\374\71\0"+
    "\1\374\7\0\1\375\2\0\1\375\4\0\1\376\2\0"+
    "\1\376\61\0\1\375\6\0\11\211\2\0\1\211\1\0"+
    "\1\211\1\206\1\0\23\211\12\0\1\211\1\0\1\211"+
    "\16\0\2\211\6\0\1\377\2\0\1\377\2\0\2\377"+
    "\2\0\1\377\4\0\2\377\1\0\2\377\51\0\1\377"+
    "\6\0\11\24\2\0\1\u0100\1\0\1\24\1\206\1\0"+
    "\23\24\12\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\u0101\1\0\23\24"+
    "\12\0\1\24\1\0\1\24\16\0\2\24\17\0\1\u0102"+
    "\72\0\11\24\2\0\1\24\1\0\1\24\1\206\1\0"+
    "\7\24\1\u0103\10\24\1\u0104\2\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\2\24\1\u0105\20\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\5\24\1\u0106\15\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\7\24\1\u0107"+
    "\1\24\2\0\1\u0108\1\0\1\24\1\206\1\0\2\24"+
    "\1\u0109\6\24\1\u010a\4\24\1\u010b\4\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\24\0\1\266\27\0\1\216"+
    "\35\0\11\24\2\0\1\24\1\0\1\24\1\206\1\0"+
    "\2\24\1\u010c\4\24\1\u010d\13\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\1\24\1\u010e\21\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\10\24\1\u010f\12\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\206\1\0\3\24\1\u0110\17\24"+
    "\12\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\206\1\0\11\24\1\u0111"+
    "\11\24\12\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\206\1\0\4\24"+
    "\1\u0112\1\24\1\u0113\14\24\12\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\206\1\0\6\24\1\u0114\14\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\10\24\1\u0115\12\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\10\24\1\u0116\12\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\206\1\0\14\24\1\u0117\6\24"+
    "\12\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\206\1\0\3\24\1\u0118"+
    "\2\24\1\u0119\1\u011a\13\24\12\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\206\1\0\7\24\1\u011b\13\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\5\24\1\u011c\15\24\12\0\1\u011d"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\u011e"+
    "\1\0\1\24\1\206\1\0\11\24\1\u011f\2\24\1\u0120"+
    "\6\24\12\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\206\1\0\20\24"+
    "\1\u0121\2\24\12\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\206\1\0"+
    "\15\24\1\234\5\24\12\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\206"+
    "\1\0\7\24\1\u0122\13\24\12\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\206\1\0\6\24\1\u0123\14\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\u0101\1\0\7\24\1\234\13\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\10\24\1\u0124\12\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\u0101\1\0\2\24\1\u0125\20\24"+
    "\12\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\206\1\0\20\24\1\u0104"+
    "\2\24\12\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\u0101\1\0\4\24"+
    "\1\257\16\24\12\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\u0101\1\0"+
    "\23\24\4\0\1\216\5\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\206"+
    "\1\0\14\24\1\u011b\6\24\12\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\206\1\0\11\24\1\u0126\11\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\7\24\1\u0127\13\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\7\24\1\u0128\13\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\u0129\1\0\1\24\1\206\1\0\11\24\1\u012a\11\24"+
    "\12\0\1\24\1\0\1\24\16\0\2\24\60\u012b\1\u012c"+
    "\24\u012b\100\0\1\272\11\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\2\24\1\257\20\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\66\0\1\u012d\105\0\1\u012e"+
    "\56\0\1\u012f\20\0\1\u0130\41\0\1\u0131\77\0\1\u0132"+
    "\20\0\1\u0133\77\0\1\u0134\4\0\1\u0135\3\0\1\u0136"+
    "\102\0\1\u0137\111\0\1\u0138\62\0\1\u0139\16\0\1\u0130"+
    "\73\0\1\u013a\7\0\1\u013b\1\u013c\102\0\1\u013d\110\0"+
    "\1\u013e\1\0\1\u013f\16\0\1\u0140\42\0\1\u0141\11\0"+
    "\1\u0142\4\0\1\u0143\76\0\1\u0130\3\0\1\u0144\100\0"+
    "\1\u0145\3\0\1\u0130\3\0\1\u0130\63\0\1\u0146\127\0"+
    "\1\u0147\61\0\1\u0148\117\0\1\322\62\0\1\u0149\71\0"+
    "\1\u0149\7\0\1\u014a\2\0\1\u014a\2\0\2\u014a\2\0"+
    "\1\u014a\4\0\2\u014a\1\0\2\u014a\51\0\1\u014a\7\0"+
    "\1\u014b\2\0\1\u014b\2\0\2\u014b\2\0\1\u014b\4\0"+
    "\2\u014b\1\0\2\u014b\51\0\1\u014b\1\0\1\135\3\0"+
    "\62\135\1\u014c\16\135\1\137\3\0\63\137\1\u014c\15\137"+
    "\36\0\1\u014d\5\0\1\u014d\15\0\1\u014d\21\0\1\u014d"+
    "\1\333\1\0\1\333\1\0\101\333\1\334\1\0\1\334"+
    "\1\0\71\334\1\0\7\334\36\0\1\u014e\5\0\1\u014e"+
    "\15\0\1\u014e\21\0\1\u014e\20\0\1\u014f\120\0\1\u0150"+
    "\77\0\1\u0151\111\0\1\u0152\76\0\1\u0153\113\0\1\u0154"+
    "\77\0\1\341\112\0\1\344\101\0\1\u0155\104\0\1\343"+
    "\106\0\1\u0156\110\0\1\341\73\0\1\u0157\2\0\1\u0158"+
    "\1\u0159\102\0\1\u0151\27\0\1\341\42\0\1\u015a\15\0"+
    "\1\370\2\0\1\u015b\110\0\1\u015c\101\0\1\341\75\0"+
    "\1\u015d\105\0\1\341\77\0\1\u015e\106\0\1\341\107\0"+
    "\1\u015f\70\0\1\u015a\15\0\1\u0160\75\0\1\341\55\0"+
    "\1\373\1\u0161\1\373\1\u0161\20\373\1\u0162\60\373\24\u0161"+
    "\1\u0163\60\u0161\6\0\1\374\2\0\1\374\6\0\1\210"+
    "\62\0\1\374\7\0\1\375\2\0\1\375\71\0\1\375"+
    "\6\0\11\24\2\0\1\24\1\0\1\24\1\206\1\0"+
    "\1\24\1\u0164\21\24\12\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\u0165\1\0\1\24\1\206"+
    "\1\0\23\24\12\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\206\1\0"+
    "\12\24\1\u0166\10\24\12\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\u0167\1\0\1\24\1\206"+
    "\1\0\23\24\12\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\206\1\0"+
    "\17\24\1\u011b\3\24\12\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\206"+
    "\1\0\11\24\1\u0168\11\24\12\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\5\24\1\u0169\3\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\23\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\6\24\1\u016a\14\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\10\24\1\u016b\12\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\206\1\0\1\24\1\u016c\21\24"+
    "\12\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\u011b\1\0\1\24\1\206\1\0\23\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\206\1\0\1\u016d\22\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\206\1\0\2\24\1\u016e\20\24"+
    "\12\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\206\1\0\2\24\1\242"+
    "\4\24\1\u016f\13\24\12\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\206"+
    "\1\0\7\24\1\u0170\13\24\12\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\206\1\0\1\24\1\u0171\21\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\u0172\1\0"+
    "\1\24\1\206\1\0\23\24\12\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\206\1\0\2\24\1\u011c\20\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\1\u0173\22\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\1\24\1\u0174\21\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\u0175"+
    "\1\0\1\24\1\206\1\0\23\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\u0176\1\0"+
    "\1\24\1\206\1\0\23\24\12\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\206\1\0\11\24\1\u0177\11\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\257\1\0"+
    "\1\24\1\206\1\0\23\24\12\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\206\1\0\10\24\1\u0178\12\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\2\24\1\u0179\20\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\12\24\1\u017a\10\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\u017b\1\0\1\24\1\206\1\0\23\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\11\24\1\u017c\11\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\206\1\0\6\24\1\257\14\24"+
    "\12\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\206\1\0\7\24\1\u017d"+
    "\13\24\12\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\206\1\0\7\24"+
    "\1\u017e\13\24\12\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\206\1\0"+
    "\3\24\1\u011b\17\24\12\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\206"+
    "\1\0\5\24\1\u017f\15\24\12\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\206\1\0\16\24\1\u011b\4\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\10\24\1\u0180\12\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\6\24\1\u0181\14\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\57\0\1\u0182\45\0"+
    "\1\u0183\64\0\5\u0184\3\0\1\u0184\5\0\2\u0184\1\0"+
    "\4\u0184\23\0\12\u0184\1\0\1\u0184\1\0\16\u0184\36\0"+
    "\1\u0185\77\0\1\u0186\111\0\1\u0187\76\0\1\u0188\113\0"+
    "\1\u0189\77\0\1\u0130\112\0\1\u0134\101\0\1\u018a\104\0"+
    "\1\u0133\106\0\1\u018b\110\0\1\u0130\73\0\1\u018c\2\0"+
    "\1\u018d\1\u018e\102\0\1\u0186\27\0\1\u0130\42\0\1\u018f"+
    "\15\0\1\u0148\2\0\1\u0190\110\0\1\u0191\101\0\1\u0130"+
    "\75\0\1\u0192\51\0\5\u0184\3\0\1\u0184\5\0\2\u0184"+
    "\1\0\4\u0184\7\0\1\u0130\13\0\12\u0184\1\0\1\u0184"+
    "\1\0\16\u0184\2\0\5\u0184\3\0\1\u0184\5\0\2\u0184"+
    "\1\0\4\u0184\2\0\1\u0193\20\0\12\u0184\1\0\1\u0184"+
    "\1\0\16\u0184\2\0\5\u0184\3\0\1\u0184\5\0\2\u0184"+
    "\1\0\4\u0184\4\0\1\u0130\16\0\12\u0184\1\0\1\u0184"+
    "\1\0\16\u0184\36\0\1\u0194\70\0\1\u018f\15\0\1\u0195"+
    "\75\0\1\u0130\66\0\1\324\71\0\1\324\7\0\1\324"+
    "\2\0\1\324\2\0\2\324\2\0\1\324\4\0\2\324"+
    "\1\0\2\324\51\0\1\324\7\0\1\326\2\0\1\326"+
    "\2\0\2\326\2\0\1\326\4\0\2\326\1\0\2\326"+
    "\51\0\1\326\1\0\1\u014c\1\0\1\u014c\1\0\101\u014c"+
    "\36\0\1\u0196\5\0\1\u0196\15\0\1\u0196\21\0\1\u0196"+
    "\36\0\1\u0197\5\0\1\u0197\15\0\1\u0197\21\0\1\u0197"+
    "\26\0\1\u0198\76\0\1\u0199\104\0\1\341\111\0\1\u019a"+
    "\106\0\1\370\111\0\1\u019b\70\0\1\u019c\112\0\1\u019d"+
    "\76\0\1\u019e\104\0\1\u0153\122\0\1\u015d\103\0\1\341"+
    "\106\0\1\361\65\0\1\u019f\117\0\1\341\105\0\1\u01a0"+
    "\102\0\1\u01a1\105\0\1\u0151\56\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\23\24\12\0\1\24\1\0"+
    "\1\u01a2\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\10\24\1\u01a3\12\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\14\24\1\242\6\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\206\1\0\10\24\1\u0126\12\24"+
    "\12\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\206\1\0\7\24\1\u01a4"+
    "\13\24\12\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\206\1\0\11\24"+
    "\1\u01a5\11\24\12\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\206\1\0"+
    "\3\24\1\u01a6\17\24\12\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\206"+
    "\1\0\2\24\1\u01a7\20\24\12\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\206\1\0\16\24\1\u01a8\4\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\2\24\1\u01a9\20\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\11\24\1\u01aa\11\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\206\1\0\1\u01ab\22\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\206\1\0\5\24\1\u01ac\15\24"+
    "\12\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\206\1\0\7\24\1\u01ad"+
    "\13\24\12\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\206\1\0\7\24"+
    "\1\u01ae\13\24\12\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\206\1\0"+
    "\6\24\1\u01af\14\24\12\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\206"+
    "\1\0\4\24\1\u01b0\16\24\12\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\206\1\0\2\24\1\u01b1\20\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\6\24\1\u01b2\14\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\15\24\1\u01b3\5\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\206\1\0\12\24\1\u01b4\10\24"+
    "\12\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\206\1\0\13\24\1\u010c"+
    "\7\24\12\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\206\1\0\1\24"+
    "\1\u01b5\21\24\12\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\206\1\0"+
    "\14\24\1\u01b6\6\24\12\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\u01b7\1\0\1\24\1\206"+
    "\1\0\23\24\12\0\1\24\1\0\1\24\16\0\2\24"+
    "\26\0\1\u01b8\76\0\1\u01b9\104\0\1\u0130\111\0\1\u01ba"+
    "\106\0\1\u0148\111\0\1\u01bb\70\0\1\u01bc\112\0\1\u01bd"+
    "\76\0\1\u01be\104\0\1\u0188\122\0\1\u0192\103\0\1\u0130"+
    "\106\0\1\u0141\65\0\1\u01bf\117\0\1\u0130\105\0\1\u01c0"+
    "\102\0\1\u01c1\105\0\1\u0186\107\0\1\u01c2\5\0\1\u01c2"+
    "\15\0\1\u01c2\21\0\1\u01c2\64\0\1\341\55\0\1\u01c3"+
    "\112\0\1\341\77\0\1\u01c4\102\0\1\u0151\103\0\1\u01c5"+
    "\102\0\1\u01c6\112\0\1\u01c7\73\0\1\u01c8\117\0\1\u015a"+
    "\50\0\11\24\2\0\1\24\1\0\1\24\1\206\1\0"+
    "\3\24\1\u01c9\17\24\12\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\u01ca\1\0\1\24\1\206"+
    "\1\0\23\24\12\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\206\1\0"+
    "\1\u010c\22\24\12\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\u01cb\1\0\1\24\1\206\1\0"+
    "\23\24\12\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\206\1\0\21\24"+
    "\1\u01cc\1\24\12\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\206\1\0"+
    "\10\24\1\u01cd\12\24\12\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\11\24\2\0\1\24\1\0\1\24\1\206"+
    "\1\0\16\24\1\u01ce\4\24\12\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\206\1\0\6\24\1\242\14\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\234\1\0"+
    "\1\24\1\206\1\0\23\24\12\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\206\1\0\11\24\1\u01cf\11\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\6\24\1\u01d0\14\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\11\24\1\u01d1\11\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\206\1\0\2\24\1\u01d2\20\24"+
    "\12\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\206\1\0\4\24\1\u01d3"+
    "\16\24\12\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\206\1\0\10\24"+
    "\1\u01d4\12\24\12\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\206\1\0"+
    "\10\24\1\u01d5\12\24\12\0\1\24\1\0\1\24\16\0"+
    "\2\24\64\0\1\u0130\55\0\1\u01d6\112\0\1\u0130\77\0"+
    "\1\u01d7\102\0\1\u0186\103\0\1\u01d8\102\0\1\u01d9\112\0"+
    "\1\u01da\73\0\1\u01db\117\0\1\u018f\73\0\1\370\111\0"+
    "\1\u01dc\102\0\1\u01dd\107\0\1\u01de\103\0\1\u01df\54\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\206\1\0\2\24"+
    "\1\u01e0\20\24\12\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\206\1\0"+
    "\10\24\1\u01e1\12\24\12\0\1\24\1\0\1\24\16\0"+
    "\2\24\5\0\5\24\1\u01e2\3\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\23\24\12\0\1\24\1\0\1\24"+
    "\16\0\2\24\5\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\206\1\0\14\24\1\u01e3\6\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\5\24\1\u01e4\15\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\12\24\1\u01e5\10\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\206\1\0\23\24\12\0\1\u01e6"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\10\24\1\u01e7\12\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\u0101\1\0\23\24\5\0\1\u01e8"+
    "\4\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\206\1\0\1\u01e9\22\24"+
    "\12\0\1\24\1\0\1\24\16\0\2\24\30\0\1\u0148"+
    "\111\0\1\u01ea\102\0\1\u01eb\107\0\1\u01ec\77\0\1\u0130"+
    "\110\0\1\u01ed\101\0\1\u0151\134\0\1\341\57\0\1\u01ee"+
    "\74\0\1\u015c\64\0\11\24\2\0\1\24\1\0\1\24"+
    "\1\206\1\0\3\24\1\u01ef\17\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\22\24\1\u01f0\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\12\24\1\u01f1\10\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\u01f2"+
    "\1\0\1\24\1\206\1\0\23\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\10\24\1\u011b\12\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24\5\0\11\24\2\0\1\u01f3"+
    "\1\0\1\24\1\206\1\0\23\24\12\0\1\24\1\0"+
    "\1\24\16\0\2\24\5\0\11\24\2\0\1\u01f4\1\0"+
    "\1\24\1\206\1\0\23\24\12\0\1\24\1\0\1\24"+
    "\16\0\2\24\32\0\1\u0186\134\0\1\u0130\57\0\1\u01f5"+
    "\74\0\1\u0191\77\0\1\347\71\0\11\24\2\0\1\24"+
    "\1\0\1\24\1\206\1\0\2\24\1\u011b\20\24\12\0"+
    "\1\24\1\0\1\24\16\0\2\24\5\0\11\24\2\0"+
    "\1\24\1\0\1\24\1\206\1\0\4\24\1\u011b\16\24"+
    "\12\0\1\24\1\0\1\24\16\0\2\24\5\0\11\24"+
    "\2\0\1\24\1\0\1\24\1\206\1\0\20\24\1\u011b"+
    "\2\24\12\0\1\24\1\0\1\24\16\0\2\24\5\0"+
    "\11\24\2\0\1\24\1\0\1\24\1\206\1\0\3\24"+
    "\1\257\17\24\12\0\1\24\1\0\1\24\16\0\2\24"+
    "\5\0\11\24\2\0\1\24\1\0\1\24\1\206\1\0"+
    "\12\24\1\u01f6\10\24\12\0\1\24\1\0\1\24\16\0"+
    "\2\24\20\0\1\u0137\71\0\11\24\2\0\1\24\1\0"+
    "\1\24\1\206\1\0\4\24\1\u01f7\16\24\12\0\1\24"+
    "\1\0\1\24\16\0\2\24";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28014];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\2\11\15\1\1\11\31\1\1\11\3\1\7\11"+
    "\1\1\2\11\2\1\1\11\1\1\1\11\1\1\11\11"+
    "\5\1\1\11\6\1\1\11\2\1\5\11\2\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\20\1\3\0\1\1\1\0\2\1\2\11\1\0\4\1"+
    "\1\0\1\11\40\1\1\0\2\11\3\1\1\11\2\0"+
    "\1\11\20\0\1\11\1\0\3\11\10\1\1\11\1\1"+
    "\1\11\1\0\1\11\21\0\3\1\3\0\2\1\1\0"+
    "\2\1\1\0\3\1\1\11\50\1\2\0\2\11\2\0"+
    "\1\11\27\0\6\1\23\0\1\1\1\11\36\1\1\11"+
    "\1\0\1\11\21\0\1\1\1\11\12\0\26\1\12\0"+
    "\1\11\6\0\15\1\12\0\10\1\1\11\1\1\5\0"+
    "\6\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[503];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

  private IElementType characterClassType;

  private final Stack<Integer> stack = new Stack<Integer>();

  /**
   * Push the actual state on top of the stack
   */
  private void pushState() {
    stack.push(yystate());
  }

  /**
   * Push the actual state on top of the stack
   * and change into another state
   *
   * @param state The new state
   */
  private void pushStateAndBegin(int state) {
    stack.push(yystate());
    yybegin(state);
  }

  /**
   * Pop the last state from the stack and change to it.
   * If the stack is empty, go to YYINITIAL
   */
  private void popState() {
    if (!stack.empty()) {
      yybegin(stack.pop());
    } else {
      yybegin(YYINITIAL);
    }
  }

  /**
   * Push the stream back to the position before the text match
   *
   * @param text The text to match
   * @return true when matched
   */
  private boolean pushBackTo(String text) {
    final int position = yytext().toString().indexOf(text);

    if (position != -1) {
      yypushback(yylength() - position);
      return true;
    }

    return false;
  }

  /**
   * Push the stream back to the position before the text match
   * and change into the given state
   *
   * @param text The text to match
   * @param state The new state
   * @return true when matched
   */
  private boolean pushBackAndState(String text, int state) {
    final boolean success = pushBackTo(text);

    if (success) {
      pushStateAndBegin(state);
    }

    return success;
  }



  public LiveScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LiveScriptLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { yybegin(YYSINGLEQUOTESTRING);
                                return LiveScriptTokenTypes.STRING_LITERAL;
          }
        case 113: break;
        case 60: 
          { return characterClassType;
          }
        case 114: break;
        case 82: 
          { pushStateAndBegin(YYINITIAL);
                                return LiveScriptTokenTypes.INTERPOLATION_START;
          }
        case 115: break;
        case 62: 
          { popState();
                                return LiveScriptTokenTypes.INTERPOLATION_END;
          }
        case 116: break;
        case 72: 
          { yybegin(YYHEREGEX);
                                return LiveScriptTokenTypes.HEREGEX_START;
          }
        case 117: break;
        case 61: 
          { popState();
                                return LiveScriptTokenTypes.REGEX_BRACKET_END;
          }
        case 118: break;
        case 23: 
          { pushState();
                                return LiveScriptTokenTypes.BRACE_START;
          }
        case 119: break;
        case 109: 
          { return LiveScriptTokenTypes.EXTENDS;
          }
        case 120: break;
        case 32: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.PLUS;
          }
        case 121: break;
        case 83: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.IDENTIFIER;
          }
        case 122: break;
        case 71: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(YYREGEX);
                                return LiveScriptTokenTypes.REGEX_START;
          }
        case 123: break;
        case 63: 
          { yybegin(YYCLASSNAME);
                                return LiveScriptTokenTypes.CLASS_NAME;
          }
        case 124: break;
        case 6: 
          { yybegin(YYIDENTIFIER);
                                return LiveScriptTokenTypes.CONSTANT;
          }
        case 125: break;
        case 11: 
          { return LiveScriptTokenTypes.COMPARE;
          }
        case 126: break;
        case 50: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(YYREGEXFLAG);
                                return LiveScriptTokenTypes.REGEX_END;
          }
        case 127: break;
        case 3: 
          { return LiveScriptTokenTypes.WHITE_SPACE;
          }
        case 128: break;
        case 38: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.BRACKET_END;
          }
        case 129: break;
        case 30: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.MINUS;
          }
        case 130: break;
        case 36: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.MATH;
          }
        case 131: break;
        case 77: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.RANGE;
          }
        case 132: break;
        case 104: 
          { return LiveScriptTokenTypes.THROW;
          }
        case 133: break;
        case 92: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.SPLAT;
          }
        case 134: break;
        case 1: 
          { stack.clear();
                                yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.BAD_CHARACTER;
          }
        case 135: break;
        case 57: 
          { characterClassType = LiveScriptTokenTypes.HEREGEX;
                                pushStateAndBegin(YYREGEXCHARACTERCLASS);
                                return LiveScriptTokenTypes.REGEX_BRACKET_START;
          }
        case 136: break;
        case 108: 
          { return LiveScriptTokenTypes.RETURN;
          }
        case 137: break;
        case 48: 
          { pushBackTo("'''");
                                return LiveScriptTokenTypes.HEREDOC;
          }
        case 138: break;
        case 103: 
          { return LiveScriptTokenTypes.UNTIL;
          }
        case 139: break;
        case 7: 
          { return LiveScriptTokenTypes.MINUS;
          }
        case 140: break;
        case 37: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.BRACKET_START;
          }
        case 141: break;
        case 81: 
          { yypushback(2);
                                pushStateAndBegin(YYINTERPOLATION);
          }
        case 142: break;
        case 86: 
          { return LiveScriptTokenTypes.SPLAT;
          }
        case 143: break;
        case 53: 
          { return LiveScriptTokenTypes.REGEX_PARENTHESIS_END;
          }
        case 144: break;
        case 106: 
          { return LiveScriptTokenTypes.SWITCH;
          }
        case 145: break;
        case 98: 
          { return LiveScriptTokenTypes.BLOCK_COMMENT;
          }
        case 146: break;
        case 21: 
          { return LiveScriptTokenTypes.PARENTHESIS_START;
          }
        case 147: break;
        case 49: 
          { return LiveScriptTokenTypes.REGEX;
          }
        case 148: break;
        case 28: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.TERMINATOR;
          }
        case 149: break;
        case 69: 
          { return LiveScriptTokenTypes.IN;
          }
        case 150: break;
        case 97: 
          { return LiveScriptTokenTypes.WHEN;
          }
        case 151: break;
        case 94: 
          { if (pushBackTo("::")) {
                                  yybegin(YYCLASSNAME);
                                  return LiveScriptTokenTypes.CLASS_NAME;
                                }
                                pushBackTo(":");
                                return LiveScriptTokenTypes.FUNCTION_NAME;
          }
        case 152: break;
        case 14: 
          { return LiveScriptTokenTypes.UNARY;
          }
        case 153: break;
        case 8: 
          { return LiveScriptTokenTypes.DOT;
          }
        case 154: break;
        case 54: 
          { return LiveScriptTokenTypes.REGEX_BRACE_START;
          }
        case 155: break;
        case 107: 
          { return LiveScriptTokenTypes.UNLESS;
          }
        case 156: break;
        case 80: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(YYREGEXFLAG);
                                return LiveScriptTokenTypes.HEREGEX_END;
          }
        case 157: break;
        case 70: 
          { return LiveScriptTokenTypes.OF;
          }
        case 158: break;
        case 105: 
          { return LiveScriptTokenTypes.WHILE;
          }
        case 159: break;
        case 9: 
          { return LiveScriptTokenTypes.PLUS;
          }
        case 160: break;
        case 13: 
          { return LiveScriptTokenTypes.EQUAL;
          }
        case 161: break;
        case 90: 
          { yybegin(YYDOUBLEQUOTEHEREDOC);
                                return LiveScriptTokenTypes.HEREDOC_START;
          }
        case 162: break;
        case 85: 
          { yypushback(1);
                                return LiveScriptTokenTypes.IDENTIFIER;
          }
        case 163: break;
        case 45: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.STRING_LITERAL;
          }
        case 164: break;
        case 67: 
          { return LiveScriptTokenTypes.BOOL;
          }
        case 165: break;
        case 111: 
          { return LiveScriptTokenTypes.CONTINUE;
          }
        case 166: break;
        case 84: 
          { pushBackTo(":");
                                return LiveScriptTokenTypes.OBJECT_KEY;
          }
        case 167: break;
        case 99: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(YYQUOTEPROPERTY);
                                yypushback(yylength());
          }
        case 168: break;
        case 24: 
          { return LiveScriptTokenTypes.SEMICOLON;
          }
        case 169: break;
        case 73: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return LiveScriptTokenTypes.MATH;
          }
        case 170: break;
        case 15: 
          { return LiveScriptTokenTypes.MATH;
          }
        case 171: break;
        case 33: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.COLON;
          }
        case 172: break;
        case 51: 
          { characterClassType = LiveScriptTokenTypes.REGEX;
                                pushStateAndBegin(YYREGEXCHARACTERCLASS);
                                return LiveScriptTokenTypes.REGEX_BRACKET_START;
          }
        case 173: break;
        case 112: 
          { return LiveScriptTokenTypes.INSTANCE_OF;
          }
        case 174: break;
        case 75: 
          { yybegin(YYJAVASCRIPT);
                                return LiveScriptTokenTypes.JAVASCRIPT_LITERAL;
          }
        case 175: break;
        case 31: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.DOT;
          }
        case 176: break;
        case 65: 
          { return LiveScriptTokenTypes.FUNCTION;
          }
        case 177: break;
        case 35: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.BANG;
          }
        case 178: break;
        case 10: 
          { return LiveScriptTokenTypes.COLON;
          }
        case 179: break;
        case 68: 
          { return LiveScriptTokenTypes.IF;
          }
        case 180: break;
        case 52: 
          { return LiveScriptTokenTypes.REGEX_PARENTHESIS_START;
          }
        case 181: break;
        case 39: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.PARENTHESIS_START;
          }
        case 182: break;
        case 100: 
          { return LiveScriptTokenTypes.BREAK;
          }
        case 183: break;
        case 20: 
          { return LiveScriptTokenTypes.BRACKET_END;
          }
        case 184: break;
        case 59: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.REGEX_FLAG;
          }
        case 185: break;
        case 88: 
          { return LiveScriptTokenTypes.ERROR_ELEMENT;
          }
        case 186: break;
        case 46: 
          { return LiveScriptTokenTypes.STRING;
          }
        case 187: break;
        case 26: 
          { return LiveScriptTokenTypes.LINE_COMMENT;
          }
        case 188: break;
        case 40: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.PARENTHESIS_END;
          }
        case 189: break;
        case 43: 
          { yypushback(yytext().length());
                                yybegin(YYINITIAL);
          }
        case 190: break;
        case 29: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.WHITE_SPACE;
          }
        case 191: break;
        case 78: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.JAVASCRIPT_LITERAL;
          }
        case 192: break;
        case 47: 
          { if (!pushBackAndState("#{", YYINTERPOLATION)) {
                                  pushBackTo("\"\"\"");
                                }
                                if (yylength() != 0) {
                                  return LiveScriptTokenTypes.HEREDOC;
                                }
          }
        case 193: break;
        case 55: 
          { return LiveScriptTokenTypes.REGEX_BRACE_END;
          }
        case 194: break;
        case 93: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.HEREDOC_END;
          }
        case 195: break;
        case 91: 
          { yybegin(YYSINGLEQUOTEHEREDOC);
                                return LiveScriptTokenTypes.HEREDOC_START;
          }
        case 196: break;
        case 5: 
          { yybegin(YYNUMBER);
                                return LiveScriptTokenTypes.NUMBER;
          }
        case 197: break;
        case 87: 
          { return LiveScriptTokenTypes.FOR;
          }
        case 198: break;
        case 41: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.COMMA;
          }
        case 199: break;
        case 12: 
          { return LiveScriptTokenTypes.LOGIC;
          }
        case 200: break;
        case 64: 
          { return LiveScriptTokenTypes.BY;
          }
        case 201: break;
        case 76: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.PROTOTYPE;
          }
        case 202: break;
        case 42: 
          { return LiveScriptTokenTypes.JAVASCRIPT;
          }
        case 203: break;
        case 19: 
          { return LiveScriptTokenTypes.BRACKET_START;
          }
        case 204: break;
        case 110: 
          { return LiveScriptTokenTypes.FINALLY;
          }
        case 205: break;
        case 79: 
          { return LiveScriptTokenTypes.ESCAPE_SEQUENCE;
          }
        case 206: break;
        case 56: 
          { pushBackTo("//");
                                if (yylength() != 0) {
                                  return LiveScriptTokenTypes.HEREGEX;
                                }
          }
        case 207: break;
        case 101: 
          { return LiveScriptTokenTypes.CATCH;
          }
        case 208: break;
        case 25: 
          { return LiveScriptTokenTypes.COMMA;
          }
        case 209: break;
        case 22: 
          { return LiveScriptTokenTypes.PARENTHESIS_END;
          }
        case 210: break;
        case 17: 
          { yybegin(YYDOUBLEQUOTESTRING);
                                return LiveScriptTokenTypes.STRING_LITERAL;
          }
        case 211: break;
        case 2: 
          { return LiveScriptTokenTypes.TERMINATOR;
          }
        case 212: break;
        case 95: 
          { return LiveScriptTokenTypes.ELSE;
          }
        case 213: break;
        case 27: 
          { popState();
                                if (yystate() == YYINITIAL) {
                                  return LiveScriptTokenTypes.BRACE_END;
                                } else {
                                  yypushback(1);
                                }
          }
        case 214: break;
        case 34: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.EXIST;
          }
        case 215: break;
        case 89: 
          { return LiveScriptTokenTypes.TRY;
          }
        case 216: break;
        case 74: 
          { return LiveScriptTokenTypes.FUNCTION_BIND;
          }
        case 217: break;
        case 4: 
          { yybegin(YYIDENTIFIER);
                                return LiveScriptTokenTypes.IDENTIFIER;
          }
        case 218: break;
        case 96: 
          { return LiveScriptTokenTypes.THEN;
          }
        case 219: break;
        case 58: 
          { yybegin(YYINITIAL);
                                yypushback(1);
          }
        case 220: break;
        case 44: 
          { pushBackAndState("#{", YYINTERPOLATION);
                                if (yylength() != 0) {
                                  return LiveScriptTokenTypes.STRING;
                                }
          }
        case 221: break;
        case 102: 
          { return LiveScriptTokenTypes.CLASS;
          }
        case 222: break;
        case 16: 
          { return LiveScriptTokenTypes.THIS;
          }
        case 223: break;
        case 66: 
          { return LiveScriptTokenTypes.COMPOUND_ASSIGN;
          }
        case 224: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
