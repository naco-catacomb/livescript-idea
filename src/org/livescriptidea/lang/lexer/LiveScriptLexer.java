/* The following code was generated by JFlex 1.4.3 on 6/18/13 7:12 PM */

package org.livescriptidea.lang.lexer;


import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.livescriptidea.lang.lexer.LiveScriptTokenTypes;
import java.util.Stack;

/**
 * The LiveScript lexer is responsible for generating a token stream of any LiveScript source file.
 *
 * @author Rack Lin
 * @since 0.1.0
 */

public class LiveScriptLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYCLASSNAME = 30;
  public static final int YYSINGLEQUOTEHEREDOC = 16;
  public static final int YYDOUBLEQUOTEHEREDOC = 14;
  public static final int YYSINGLEQUOTESTRING = 10;
  public static final int YYREGEX = 18;
  public static final int YYHEREGEX = 20;
  public static final int YYIDENTIFIER = 2;
  public static final int YYINTERPOLATION = 26;
  public static final int YYDOUBLEQUOTESTRING = 8;
  public static final int YYJAVASCRIPT = 6;
  public static final int YYREGEXCHARACTERCLASS = 24;
  public static final int YYBACKSLASHQUOTESTRING = 12;
  public static final int YYNUMBER = 4;
  public static final int YYINITIAL = 0;
  public static final int YYQUOTEPROPERTY = 28;
  public static final int YYREGEXFLAG = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\3\2\0\1\1\22\0\1\100\1\55\1\66\1\101"+
    "\1\10\1\61\1\50\1\67\1\73\1\74\1\60\1\21\1\77\1\16"+
    "\1\17\1\57\1\11\10\103\1\6\1\23\1\76\1\56\1\54\1\24"+
    "\1\53\1\65\6\15\10\7\1\47\1\42\7\7\1\13\2\7\1\71"+
    "\1\2\1\72\1\52\1\22\1\70\1\37\1\46\1\45\1\43\1\20"+
    "\1\14\1\104\1\30\1\26\1\5\1\64\1\44\1\33\1\31\1\35"+
    "\1\34\1\5\1\36\1\41\1\27\1\32\1\40\1\25\1\12\1\62"+
    "\1\5\1\75\1\51\1\102\1\63\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\20\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\5\1\6\2\5\1\10\1\11\1\5\1\12\1\5"+
    "\1\13\1\14\17\5\3\15\1\16\1\17\1\14\1\1"+
    "\1\20\1\5\1\17\1\21\1\22\1\23\1\1\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\3\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\1"+
    "\1\36\1\40\1\1\1\53\1\54\1\55\1\54\1\56"+
    "\2\57\1\54\2\60\2\61\1\62\2\54\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\2\71\1\72\1\54\1\73"+
    "\1\74\1\75\1\76\1\54\1\77\2\1\1\11\21\1"+
    "\1\40\1\1\3\0\1\100\1\0\6\5\1\101\1\102"+
    "\1\0\4\5\1\0\1\14\2\5\1\103\1\104\1\5"+
    "\1\14\5\5\1\105\3\5\1\106\2\5\1\105\1\15"+
    "\5\5\1\17\5\5\1\107\1\110\1\0\1\111\1\112"+
    "\1\111\1\113\1\5\1\114\2\0\1\115\1\25\24\0"+
    "\1\116\3\0\1\117\4\120\1\60\1\61\1\63\1\121"+
    "\1\33\1\122\1\74\1\123\10\0\2\124\6\0\1\124"+
    "\2\0\1\124\15\0\2\125\1\0\2\6\1\0\1\6"+
    "\3\5\1\126\2\5\1\127\14\5\1\130\7\5\1\131"+
    "\11\5\1\15\10\5\2\0\1\132\1\133\5\0\1\134"+
    "\36\0\3\120\1\135\1\63\1\74\26\0\2\136\4\5"+
    "\1\137\1\140\5\5\1\141\3\5\1\14\1\110\1\21"+
    "\20\5\1\142\6\0\1\143\17\0\1\144\1\63\1\74"+
    "\16\0\11\5\1\145\1\5\1\146\2\5\1\147\10\5"+
    "\1\150\1\151\1\152\16\0\1\63\11\0\7\5\1\17"+
    "\1\5\1\153\1\5\1\154\1\155\2\5\17\0\1\156"+
    "\1\157\4\5\1\17\3\5\7\0\6\5\1\160\1\0"+
    "\1\5\1\161";

  private static int [] zzUnpackAction() {
    int [] result = new int[582];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee"+
    "\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816"+
    "\0\u0450\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9"+
    "\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21"+
    "\0\u0c66\0\u0cab\0\u0cf0\0\u07d1\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04"+
    "\0\u07d1\0\u0e49\0\u0e8e\0\u0450\0\u0ed3\0\u0f18\0\u0f5d\0\u0450"+
    "\0\u0fa2\0\u0450\0\u0450\0\u0450\0\u0450\0\u0450\0\u0fe7\0\u0450"+
    "\0\u0450\0\u102c\0\u1071\0\u0450\0\u10b6\0\u0450\0\u10fb\0\u0450"+
    "\0\u0450\0\u0450\0\u0450\0\u0450\0\u0450\0\u0450\0\u0450\0\u102c"+
    "\0\u1140\0\u0450\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299\0\u0450"+
    "\0\u12de\0\u1323\0\u102c\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c"+
    "\0\u0450\0\u14c1\0\u1506\0\u0450\0\u0450\0\u0450\0\u0450\0\u0450"+
    "\0\u154b\0\u1590\0\u0450\0\u15d5\0\u0450\0\u161a\0\u165f\0\u0450"+
    "\0\u16a4\0\u0450\0\u16e9\0\u172e\0\u0450\0\u1773\0\u17b8\0\u17fd"+
    "\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25"+
    "\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u10fb"+
    "\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30"+
    "\0\u1e75\0\u1eba\0\u1eff\0\u0450\0\u0450\0\u1f44\0\u1f89\0\u1fce"+
    "\0\u2013\0\u2058\0\u209d\0\u0450\0\u20e2\0\u2127\0\u216c\0\u21b1"+
    "\0\u21f6\0\u223b\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9"+
    "\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u216c\0\u25bc"+
    "\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715\0\u216c\0\u275a\0\u279f"+
    "\0\u27e4\0\u2829\0\u286e\0\u216c\0\u0450\0\u07d1\0\u0450\0\u0450"+
    "\0\u28b3\0\u28f8\0\u293d\0\u0450\0\u2982\0\u29c7\0\u0450\0\u0450"+
    "\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef"+
    "\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17"+
    "\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u0450\0\u2f70\0\u2fb5\0\u1185"+
    "\0\u0450\0\u0450\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u310e\0\u3153"+
    "\0\u3198\0\u31dd\0\u0450\0\u3222\0\u0450\0\u3267\0\u32ac\0\u32f1"+
    "\0\u3336\0\u337b\0\u33c0\0\u3405\0\u344a\0\u0450\0\u348f\0\u34d4"+
    "\0\u3519\0\u355e\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc"+
    "\0\u3741\0\u3786\0\u37cb\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924"+
    "\0\u3672\0\u3969\0\u39ae\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07"+
    "\0\u3ac2\0\u3b4c\0\u3b91\0\u3b91\0\u1d61\0\u216c\0\u3bd6\0\u3c1b"+
    "\0\u216c\0\u3c60\0\u3ca5\0\u0450\0\u3cea\0\u3d2f\0\u3d74\0\u3db9"+
    "\0\u3dfe\0\u3e43\0\u3e88\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1"+
    "\0\u1c4d\0\u4026\0\u406b\0\u40b0\0\u40f5\0\u413a\0\u417f\0\u41c4"+
    "\0\u216c\0\u4209\0\u424e\0\u4293\0\u42d8\0\u431d\0\u4362\0\u43a7"+
    "\0\u43ec\0\u4431\0\u216c\0\u4476\0\u44bb\0\u4500\0\u4545\0\u458a"+
    "\0\u45cf\0\u4614\0\u4659\0\u28b3\0\u469e\0\u0450\0\u0450\0\u46e3"+
    "\0\u4728\0\u476d\0\u47b2\0\u47f7\0\u0450\0\u483c\0\u4881\0\u48c6"+
    "\0\u490b\0\u4950\0\u4995\0\u49da\0\u4a1f\0\u4a64\0\u4aa9\0\u4aee"+
    "\0\u4b33\0\u4b78\0\u4bbd\0\u4c02\0\u4c47\0\u4c8c\0\u4cd1\0\u4d16"+
    "\0\u4d5b\0\u4da0\0\u4de5\0\u4e2a\0\u4e6f\0\u4eb4\0\u4ef9\0\u4f3e"+
    "\0\u4f83\0\u4fc8\0\u500d\0\u5052\0\u5097\0\u50dc\0\u5121\0\u5166"+
    "\0\u51ab\0\u51f0\0\u5235\0\u527a\0\u52bf\0\u5304\0\u5349\0\u538e"+
    "\0\u53d3\0\u5418\0\u545d\0\u54a2\0\u54e7\0\u552c\0\u5571\0\u55b6"+
    "\0\u55fb\0\u5640\0\u5685\0\u56ca\0\u570f\0\u5754\0\u3b07\0\u3ac2"+
    "\0\u0450\0\u5799\0\u57de\0\u5823\0\u5868\0\u051f\0\u216c\0\u58ad"+
    "\0\u58f2\0\u5937\0\u597c\0\u59c1\0\u216c\0\u5a06\0\u5a4b\0\u5a90"+
    "\0\u051f\0\u216c\0\u216c\0\u5ad5\0\u5b1a\0\u5b5f\0\u5ba4\0\u5be9"+
    "\0\u5c2e\0\u5c73\0\u5cb8\0\u5cfd\0\u5d42\0\u5d87\0\u5dcc\0\u5e11"+
    "\0\u5e56\0\u5e9b\0\u5ee0\0\u0450\0\u5f25\0\u5f6a\0\u5faf\0\u5ff4"+
    "\0\u6039\0\u607e\0\u0450\0\u60c3\0\u6108\0\u614d\0\u6192\0\u61d7"+
    "\0\u621c\0\u6261\0\u62a6\0\u62eb\0\u6330\0\u6375\0\u63ba\0\u63ff"+
    "\0\u6444\0\u6489\0\u500d\0\u64ce\0\u0450\0\u6513\0\u6558\0\u659d"+
    "\0\u65e2\0\u6627\0\u666c\0\u66b1\0\u66f6\0\u673b\0\u6780\0\u67c5"+
    "\0\u680a\0\u684f\0\u6894\0\u68d9\0\u691e\0\u6963\0\u69a8\0\u69ed"+
    "\0\u6a32\0\u6a77\0\u6abc\0\u6b01\0\u216c\0\u6b46\0\u216c\0\u6b8b"+
    "\0\u6bd0\0\u216c\0\u6c15\0\u6c5a\0\u6c9f\0\u6ce4\0\u6d29\0\u6d6e"+
    "\0\u6db3\0\u6df8\0\u216c\0\u216c\0\u216c\0\u6e3d\0\u6e82\0\u6ec7"+
    "\0\u6f0c\0\u6f51\0\u6f96\0\u6fdb\0\u7020\0\u7065\0\u70aa\0\u70ef"+
    "\0\u7134\0\u7179\0\u71be\0\u0450\0\u7203\0\u7248\0\u728d\0\u72d2"+
    "\0\u3741\0\u7317\0\u735c\0\u73a1\0\u73e6\0\u742b\0\u7470\0\u74b5"+
    "\0\u74fa\0\u753f\0\u7584\0\u75c9\0\u760e\0\u7653\0\u216c\0\u7698"+
    "\0\u216c\0\u216c\0\u76dd\0\u7722\0\u7767\0\u77ac\0\u77f1\0\u7836"+
    "\0\u787b\0\u78c0\0\u7905\0\u794a\0\u798f\0\u79d4\0\u7a19\0\u7a5e"+
    "\0\u7aa3\0\u7ae8\0\u7b2d\0\u216c\0\u216c\0\u7b72\0\u7bb7\0\u7bfc"+
    "\0\u7c41\0\u0450\0\u7c86\0\u7ccb\0\u7d10\0\u7d55\0\u7d9a\0\u7ddf"+
    "\0\u7e24\0\u7e69\0\u7eae\0\u7ef3\0\u7f38\0\u7f7d\0\u7fc2\0\u8007"+
    "\0\u804c\0\u8091\0\u216c\0\u80d6\0\u811b\0\u216c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[582];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\21\1\22\1\23\1\22\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\27\1\33\1\27\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\25\1\46\1\47\1\50\1\25\1\51\1\52\1\53"+
    "\1\54\1\55\1\27\1\56\1\57\1\60\1\61\1\27"+
    "\1\62\1\63\2\64\1\65\1\66\1\67\1\70\2\71"+
    "\1\72\1\73\1\25\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\24\1\107"+
    "\1\110\1\26\1\25\1\21\1\111\1\112\1\111\1\113"+
    "\11\21\1\114\1\115\1\21\1\116\1\21\1\117\27\21"+
    "\1\120\1\21\1\121\1\21\3\122\7\21\1\123\1\124"+
    "\1\125\1\126\1\21\1\105\1\127\1\113\1\21\1\110"+
    "\3\21\1\111\1\130\1\111\1\131\11\21\1\114\1\132"+
    "\1\21\1\116\1\21\1\117\25\21\1\133\5\21\3\122"+
    "\7\21\1\123\1\124\1\21\1\126\1\21\1\105\1\127"+
    "\1\131\1\21\1\110\2\21\70\134\1\135\14\134\1\136"+
    "\1\22\1\137\1\22\62\136\1\140\16\136\1\141\1\22"+
    "\1\137\1\22\63\141\1\140\15\141\1\142\1\111\1\143"+
    "\1\111\1\113\65\142\1\124\5\142\1\113\4\142\1\144"+
    "\1\22\1\137\1\22\62\144\1\145\16\144\1\146\1\22"+
    "\1\137\1\22\63\146\1\147\15\146\1\150\1\151\1\152"+
    "\1\151\53\150\1\153\11\150\1\154\1\151\1\155\1\156"+
    "\1\157\4\150\1\160\2\150\1\161\1\22\1\137\1\22"+
    "\53\161\1\162\11\161\1\163\1\151\1\155\1\156\1\157"+
    "\3\161\1\164\1\160\2\161\1\151\1\165\1\151\1\165"+
    "\13\151\1\165\6\151\1\166\4\151\1\166\26\151\1\166"+
    "\6\151\1\165\6\151\1\165\3\151\1\166\1\167\1\151"+
    "\1\152\1\151\66\167\1\170\12\167\101\151\1\171\1\172"+
    "\2\151\3\21\1\0\6\21\1\173\1\21\1\174\2\21"+
    "\1\175\1\176\4\21\1\177\1\200\1\201\1\21\1\202"+
    "\1\203\1\204\1\21\1\205\1\206\1\207\1\210\1\211"+
    "\1\21\1\212\1\213\1\214\1\215\13\21\1\216\23\21"+
    "\1\111\1\130\1\111\1\113\12\21\1\217\3\21\1\220"+
    "\47\21\1\125\1\126\2\21\1\127\1\113\4\21\110\0"+
    "\1\22\105\0\1\24\73\0\1\24\11\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\23\25\12\0\1\25"+
    "\1\0\1\25\16\0\2\25\6\0\1\26\2\0\1\26"+
    "\5\0\1\222\1\223\62\0\1\26\6\0\1\224\4\27"+
    "\1\224\1\27\1\224\1\27\2\0\1\224\1\0\1\27"+
    "\1\221\1\0\15\224\1\27\4\224\1\27\12\0\1\224"+
    "\1\0\1\224\16\0\1\27\1\224\5\0\11\30\2\0"+
    "\1\30\1\0\1\30\2\0\23\30\12\0\1\30\1\0"+
    "\1\30\16\0\2\30\6\0\1\26\2\0\1\26\2\225"+
    "\3\0\1\222\1\223\62\0\1\26\6\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\10\25\1\226\12\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\25\1\0\1\25\1\221\1\0\1\25\1\227"+
    "\3\25\1\230\2\25\1\231\1\232\1\233\10\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\6\0\1\26\2\0"+
    "\1\26\12\0\1\234\27\0\1\235\26\0\1\26\20\0"+
    "\1\236\72\0\5\25\1\237\3\25\2\0\1\25\1\0"+
    "\1\25\1\221\1\0\4\25\1\240\12\25\1\241\3\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\54\0\1\235"+
    "\35\0\11\25\2\0\1\25\1\0\1\242\1\221\1\0"+
    "\23\25\12\0\1\25\1\0\1\25\16\0\2\25\24\0"+
    "\1\243\27\0\1\244\35\0\11\25\2\0\1\25\1\0"+
    "\1\25\1\221\1\0\1\25\1\245\1\25\1\246\17\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\7\25"+
    "\1\247\1\25\2\0\1\25\1\0\1\25\1\221\1\0"+
    "\4\25\1\250\1\25\1\251\5\25\1\252\6\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\3\25\1\253\5\25"+
    "\1\254\11\25\12\0\1\255\1\0\1\25\16\0\2\25"+
    "\5\0\11\25\2\0\1\256\1\0\1\25\1\221\1\0"+
    "\5\25\1\257\2\25\1\260\1\25\1\261\10\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\4\25\1\262\16\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\25\1\0\1\25\1\221\1\0\12\25\1\263"+
    "\10\25\12\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\7\25\1\264\1\25\2\0\1\25\1\0\1\25\1\221"+
    "\1\0\1\265\1\25\1\266\1\25\1\267\4\25\1\270"+
    "\11\25\12\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\11\25\2\0\1\271\1\0\1\25\1\221\1\0\23\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\25\1\0\1\25\1\221\1\0\4\25\1\272"+
    "\12\25\1\273\3\25\12\0\1\25\1\0\1\25\16\0"+
    "\2\25\5\0\11\25\2\0\1\25\1\0\1\25\1\221"+
    "\1\0\12\25\1\226\10\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\5\0\11\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\1\274\22\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\5\0\11\25\2\0\1\275\1\0\1\25"+
    "\1\221\1\0\10\25\1\276\12\25\12\0\1\25\1\0"+
    "\1\25\16\0\2\25\5\0\11\25\2\0\1\277\1\0"+
    "\1\25\1\221\1\0\23\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\5\0\11\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\10\25\1\300\1\25\1\301\4\25\1\302"+
    "\3\25\12\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\11\25\2\0\1\25\1\0\1\25\1\221\1\0\11\25"+
    "\1\303\11\25\12\0\1\304\1\0\1\25\16\0\2\25"+
    "\50\0\1\64\3\0\1\235\101\0\1\64\2\0\1\235"+
    "\54\0\1\305\27\0\1\244\104\0\1\244\104\0\1\244"+
    "\1\0\1\306\12\0\1\100\13\0\54\307\1\235\2\307"+
    "\1\310\1\311\17\307\1\312\4\307\5\0\11\25\2\0"+
    "\1\313\1\0\1\25\1\221\1\0\23\25\12\0\1\25"+
    "\1\0\1\25\16\0\2\25\24\0\1\314\146\0\1\315"+
    "\105\0\1\316\105\0\1\317\40\0\1\320\60\0\3\107"+
    "\1\0\101\107\3\0\1\111\105\0\1\113\73\0\1\113"+
    "\16\0\1\321\1\0\1\322\2\0\1\323\1\324\4\0"+
    "\1\325\1\326\1\327\1\0\1\330\1\331\1\332\1\0"+
    "\1\333\1\334\1\335\1\336\1\337\1\0\1\340\1\341"+
    "\1\342\1\343\13\0\1\344\45\0\1\345\65\0\1\131"+
    "\22\0\1\346\16\0\1\347\2\0\1\350\26\0\1\131"+
    "\10\0\1\350\22\0\1\346\16\0\1\347\2\0\1\350"+
    "\26\0\1\350\4\0\70\134\1\0\14\134\70\0\1\351"+
    "\14\0\1\136\3\0\62\136\1\0\16\136\1\352\1\0"+
    "\1\352\1\22\5\352\1\353\1\354\17\352\1\355\50\352"+
    "\1\353\1\352\1\141\3\0\63\141\1\0\15\141\1\142"+
    "\4\0\65\142\1\0\5\142\1\0\4\142\1\144\3\0"+
    "\102\144\3\0\62\144\1\356\16\144\1\146\3\0\102\146"+
    "\3\0\63\146\1\357\15\146\1\150\3\0\53\150\1\0"+
    "\11\150\5\0\4\150\1\0\2\150\1\352\1\0\1\352"+
    "\1\0\5\352\1\353\1\354\17\352\1\355\50\352\1\353"+
    "\1\352\26\0\1\360\4\0\1\360\26\0\1\360\21\0"+
    "\1\360\1\161\3\0\65\161\5\0\3\161\2\0\3\161"+
    "\3\0\53\161\1\361\11\161\5\0\3\161\2\0\2\161"+
    "\1\362\1\0\1\362\1\0\71\362\1\363\7\362\26\0"+
    "\1\364\4\0\1\364\26\0\1\364\21\0\1\364\1\167"+
    "\3\0\66\167\1\0\12\167\75\0\1\365\44\0\1\366"+
    "\75\0\1\367\3\0\1\370\2\0\1\366\1\371\1\372"+
    "\57\0\1\373\31\0\1\374\70\0\1\375\70\0\1\376"+
    "\14\0\1\377\1\0\1\u0100\101\0\1\u0101\5\0\1\u0102"+
    "\23\0\1\u0103\42\0\1\u0104\11\0\1\u0105\2\0\1\u0106"+
    "\100\0\1\u0107\112\0\1\u0108\61\0\1\u0109\10\0\1\u010a"+
    "\1\0\1\u010b\1\0\1\376\4\0\1\376\66\0\1\u010c"+
    "\115\0\1\u010d\12\0\1\u010e\77\0\1\366\72\0\1\u010f"+
    "\77\0\1\u0110\14\0\1\376\67\0\1\u0111\121\0\1\u0112"+
    "\1\0\1\u0113\4\0\1\u0114\76\0\1\u0115\23\0\1\376"+
    "\42\0\1\u0116\76\0\1\321\1\0\1\322\3\0\1\324"+
    "\4\0\1\325\1\326\1\327\1\0\1\330\1\331\1\332"+
    "\1\0\1\333\1\334\1\335\1\336\1\337\1\0\1\340"+
    "\1\341\1\342\1\343\13\0\1\344\22\0\1\u0117\1\u0118"+
    "\1\u0117\1\u0118\17\u0117\1\u0119\61\u0117\6\0\1\u011a\2\0"+
    "\1\u011a\71\0\1\u011a\7\0\1\u011b\2\0\1\u011b\4\0"+
    "\1\u011c\2\0\1\u011c\61\0\1\u011b\6\0\11\224\2\0"+
    "\1\224\1\0\1\224\1\221\1\0\23\224\12\0\1\224"+
    "\1\0\1\224\16\0\2\224\6\0\1\u011d\2\0\1\u011d"+
    "\2\0\2\u011d\2\0\1\u011d\16\0\1\u011d\3\0\1\u011d"+
    "\1\0\2\u011d\34\0\1\u011d\6\0\11\25\2\0\1\25"+
    "\1\0\1\25\1\221\1\0\11\25\1\u011e\11\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\4\25\1\u011f\16\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\25\1\0\1\25\1\221\1\0\4\25\1\u0120"+
    "\16\25\12\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\11\25\2\0\1\25\1\0\1\25\1\221\1\0\11\25"+
    "\1\u0121\11\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\11\25\2\0\1\25\1\0\1\25\1\221\1\0"+
    "\10\25\1\u0122\12\25\12\0\1\25\1\0\1\25\16\0"+
    "\2\25\5\0\11\25\2\0\1\25\1\0\1\25\1\221"+
    "\1\0\17\25\1\u0123\3\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\17\0\1\u0124\72\0\11\25\2\0\1\25"+
    "\1\0\1\25\1\221\1\0\2\25\1\u0125\4\25\1\u0126"+
    "\13\25\12\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\11\25\2\0\1\25\1\0\1\25\1\221\1\0\5\25"+
    "\1\u0127\15\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\11\25\2\0\1\25\1\0\1\25\1\221\1\0"+
    "\14\25\1\u0128\6\25\12\0\1\25\1\0\1\25\16\0"+
    "\2\25\5\0\11\25\2\0\1\u0129\1\0\1\25\1\221"+
    "\1\0\1\25\1\u012a\1\25\1\u012b\10\25\1\u012c\4\25"+
    "\1\u012d\1\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\24\0\1\306\27\0\1\235\35\0\11\25\2\0\1\25"+
    "\1\0\1\25\1\221\1\0\2\25\1\u012e\20\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\u012f\1\0\1\25\1\221\1\0\1\25\1\u0130\21\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\25\1\0\1\25\1\u0131\1\0\23\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\u0131\1\0\14\25\1\u0132\6\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\25\1\0\1\25\1\221\1\0\7\25\1\u0133"+
    "\13\25\12\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\11\25\2\0\1\25\1\0\1\25\1\221\1\0\4\25"+
    "\1\u0134\16\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\11\25\2\0\1\u0135\1\0\1\25\1\221\1\0"+
    "\1\25\1\u0136\7\25\1\u0137\11\25\12\0\1\25\1\0"+
    "\1\25\16\0\2\25\5\0\11\25\2\0\1\25\1\0"+
    "\1\25\1\221\1\0\5\25\1\u0138\15\25\12\0\1\u0139"+
    "\1\0\1\25\16\0\2\25\5\0\11\25\2\0\1\25"+
    "\1\0\1\25\1\221\1\0\7\25\1\u013a\13\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\1\276\22\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\17\25\1\u013b\3\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\25\1\0\1\25\1\u0131\1\0\2\25\1\276"+
    "\20\25\12\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\11\25\2\0\1\25\1\0\1\25\1\221\1\0\2\25"+
    "\1\u013c\20\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\11\25\2\0\1\25\1\0\1\25\1\221\1\0"+
    "\2\25\1\u013d\13\25\1\u013e\1\u013f\3\25\12\0\1\25"+
    "\1\0\1\25\16\0\2\25\5\0\11\25\2\0\1\25"+
    "\1\0\1\25\1\221\1\0\2\25\1\u0140\20\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\7\25\1\267"+
    "\1\25\2\0\1\25\1\0\1\25\1\u0131\1\0\23\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\25\1\0\1\25\1\221\1\0\4\25\1\u011e"+
    "\16\25\12\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\11\25\2\0\1\25\1\0\1\25\1\221\1\0\3\25"+
    "\1\u0141\17\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\11\25\2\0\1\25\1\0\1\25\1\u0131\1\0"+
    "\23\25\4\0\1\235\5\0\1\25\1\0\1\25\16\0"+
    "\2\25\5\0\11\25\2\0\1\25\1\0\1\25\1\221"+
    "\1\0\2\25\1\u0142\20\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\5\0\11\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\16\25\1\u0143\4\25\12\0\1\25\1\0"+
    "\1\25\16\0\2\25\5\0\11\25\2\0\1\25\1\0"+
    "\1\25\1\221\1\0\17\25\1\u011e\3\25\12\0\1\25"+
    "\1\0\1\25\16\0\2\25\5\0\11\25\2\0\1\25"+
    "\1\0\1\25\1\221\1\0\1\25\1\u0144\21\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\7\25\1\u0145"+
    "\1\25\2\0\1\25\1\0\1\25\1\221\1\0\17\25"+
    "\1\u0146\3\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\11\25\2\0\1\25\1\0\1\25\1\221\1\0"+
    "\2\25\1\u011e\20\25\12\0\1\25\1\0\1\25\16\0"+
    "\2\25\5\0\11\25\2\0\1\25\1\0\1\25\1\221"+
    "\1\0\4\25\1\u0147\16\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\5\0\11\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\2\25\1\u0148\11\25\1\u0149\6\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\12\25\1\u014a\10\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\u014b\1\0\1\25\1\221\1\0\23\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\60\u014c\1\u014d\24\u014c"+
    "\100\0\1\312\11\0\11\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\14\25\1\267\6\25\12\0\1\25\1\0"+
    "\1\25\16\0\2\25\66\0\1\u014e\105\0\1\u014f\52\0"+
    "\1\u0150\75\0\1\u0151\3\0\1\u0152\2\0\1\u0150\1\u0153"+
    "\1\u0154\64\0\1\u0155\77\0\1\u0156\31\0\1\u0157\70\0"+
    "\1\u0158\70\0\1\u0159\14\0\1\u015a\1\0\1\u015b\101\0"+
    "\1\u015c\5\0\1\u015d\23\0\1\u015e\42\0\1\u015f\11\0"+
    "\1\u0160\2\0\1\u0161\100\0\1\u0162\112\0\1\u0163\61\0"+
    "\1\u0164\10\0\1\u0165\1\0\1\u0166\1\0\1\u0159\4\0"+
    "\1\u0159\66\0\1\u0167\115\0\1\u0168\12\0\1\u0169\77\0"+
    "\1\u0150\72\0\1\u016a\77\0\1\u016b\14\0\1\u0159\67\0"+
    "\1\u016c\121\0\1\u016d\1\0\1\u016e\4\0\1\u016f\76\0"+
    "\1\u0170\23\0\1\u0159\42\0\1\u0171\112\0\1\u0172\6\0"+
    "\1\u0173\131\0\1\u0173\33\0\1\u0174\71\0\1\u0174\7\0"+
    "\1\u0175\2\0\1\u0175\2\0\2\u0175\2\0\1\u0175\16\0"+
    "\1\u0175\3\0\1\u0175\1\0\2\u0175\34\0\1\u0175\7\0"+
    "\1\u0176\2\0\1\u0176\2\0\2\u0176\2\0\1\u0176\16\0"+
    "\1\u0176\3\0\1\u0176\1\0\2\u0176\34\0\1\u0176\1\0"+
    "\1\144\3\0\62\144\1\u0177\16\144\1\146\3\0\63\146"+
    "\1\u0177\15\146\26\0\1\u0178\4\0\1\u0178\26\0\1\u0178"+
    "\21\0\1\u0178\1\361\1\0\1\361\1\0\101\361\1\362"+
    "\1\0\1\362\1\0\71\362\1\0\7\362\26\0\1\u0179"+
    "\4\0\1\u0179\26\0\1\u0179\21\0\1\u0179\36\0\1\376"+
    "\77\0\1\u017a\104\0\1\u017b\110\0\1\u017c\113\0\1\374"+
    "\67\0\1\u017d\116\0\1\u017e\63\0\1\u010a\5\0\1\u017f"+
    "\117\0\1\u0180\77\0\1\u0181\70\0\1\u010a\5\0\1\u0116"+
    "\7\0\1\u0182\100\0\1\u017e\27\0\1\376\56\0\1\u0183"+
    "\75\0\1\376\123\0\1\u010e\67\0\1\376\104\0\1\u0184"+
    "\13\0\1\u0185\1\u0186\67\0\1\u0187\71\0\1\376\121\0"+
    "\1\376\103\0\1\u0188\103\0\1\u0189\120\0\1\376\105\0"+
    "\1\376\66\0\1\u0108\72\0\1\u018a\27\0\1\u018b\71\0"+
    "\1\u018c\102\0\1\u0187\11\0\1\u017e\102\0\1\u018d\65\0"+
    "\1\u018e\125\0\1\376\43\0\1\u0119\1\u018f\1\u0119\1\u018f"+
    "\20\u0119\1\u0190\60\u0119\24\u018f\1\u0191\60\u018f\6\0\1\u011a"+
    "\2\0\1\u011a\6\0\1\223\62\0\1\u011a\7\0\1\u011b"+
    "\2\0\1\u011b\71\0\1\u011b\6\0\11\25\2\0\1\25"+
    "\1\0\1\25\1\221\1\0\12\25\1\u0192\10\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\20\25\1\u0193\2\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\25\1\0\1\25\1\221\1\0\6\25\1\u011e"+
    "\14\25\12\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\11\25\2\0\1\25\1\0\1\25\1\221\1\0\14\25"+
    "\1\u0138\6\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\11\25\2\0\1\u0194\1\0\1\25\1\221\1\0"+
    "\23\25\12\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\11\25\2\0\1\25\1\0\1\25\1\221\1\0\10\25"+
    "\1\u0195\12\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\11\25\2\0\1\25\1\0\1\25\1\221\1\0"+
    "\6\25\1\u0196\14\25\12\0\1\25\1\0\1\25\16\0"+
    "\2\25\5\0\11\25\2\0\1\u0197\1\0\1\25\1\221"+
    "\1\0\23\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\5\25\1\u0198\3\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\23\25\12\0\1\25\1\0\1\25\16\0"+
    "\2\25\5\0\11\25\2\0\1\25\1\0\1\25\1\221"+
    "\1\0\4\25\1\u0199\16\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\5\0\11\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\12\25\1\u019a\10\25\12\0\1\25\1\0"+
    "\1\25\16\0\2\25\5\0\11\25\2\0\1\25\1\0"+
    "\1\25\1\221\1\0\17\25\1\u019b\3\25\12\0\1\25"+
    "\1\0\1\25\16\0\2\25\5\0\11\25\2\0\1\25"+
    "\1\0\1\25\1\221\1\0\1\25\1\u019c\21\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\3\25\1\u0196\17\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\25\1\0\1\25\1\221\1\0\4\25\1\u019d"+
    "\16\25\12\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\11\25\2\0\1\25\1\0\1\25\1\221\1\0\17\25"+
    "\1\u019e\3\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\11\25\2\0\1\25\1\0\1\25\1\221\1\0"+
    "\2\25\1\u019f\20\25\12\0\1\25\1\0\1\25\16\0"+
    "\2\25\5\0\11\25\2\0\1\25\1\0\1\25\1\221"+
    "\1\0\10\25\1\u01a0\12\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\5\0\11\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\2\25\1\u01a1\20\25\12\0\1\25\1\0"+
    "\1\25\16\0\2\25\5\0\11\25\2\0\1\25\1\0"+
    "\1\25\1\221\1\0\4\25\1\u01a2\16\25\12\0\1\25"+
    "\1\0\1\25\16\0\2\25\5\0\11\25\2\0\1\25"+
    "\1\0\1\25\1\221\1\0\14\25\1\u01a3\6\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\10\25\1\u01a4\12\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\267\1\0\1\25\1\221\1\0\23\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\u01a5\1\0\1\25\1\221\1\0\23\25\12\0\1\25"+
    "\1\0\1\25\16\0\2\25\5\0\11\25\2\0\1\25"+
    "\1\0\1\25\1\221\1\0\17\25\1\267\3\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\1\25\1\u01a6\21\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\25\1\0\1\25\1\221\1\0\1\25\1\u01a7"+
    "\21\25\12\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\11\25\2\0\1\u01a8\1\0\1\25\1\221\1\0\23\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\u01a9\1\0\1\25\1\221\1\0\23\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\20\25\1\u01aa\2\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\u01ab\1\0\1\25\1\221\1\0\23\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\5\25\1\u01ac\15\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\25\1\0\1\25\1\221\1\0\2\25\1\u01ad"+
    "\20\25\12\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\11\25\2\0\1\25\1\0\1\25\1\221\1\0\12\25"+
    "\1\u01ae\10\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\11\25\2\0\1\u01af\1\0\1\25\1\221\1\0"+
    "\23\25\12\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\11\25\2\0\1\25\1\0\1\25\1\221\1\0\2\25"+
    "\1\u01b0\20\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\11\25\2\0\1\25\1\0\1\25\1\221\1\0"+
    "\20\25\1\u01b1\2\25\12\0\1\25\1\0\1\25\16\0"+
    "\2\25\5\0\11\25\2\0\1\u019d\1\0\1\25\1\221"+
    "\1\0\23\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\11\25\2\0\1\25\1\0\1\25\1\221\1\0"+
    "\14\25\1\u01b2\6\25\12\0\1\25\1\0\1\25\16\0"+
    "\2\25\5\0\11\25\2\0\1\25\1\0\1\25\1\221"+
    "\1\0\12\25\1\u01b3\10\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\57\0\1\u01b4\63\0\1\u0159\77\0\1\u01b5"+
    "\104\0\1\u01b6\110\0\1\u01b7\113\0\1\u0157\67\0\1\u01b8"+
    "\116\0\1\u01b9\63\0\1\u0165\5\0\1\u01ba\56\0\5\u01bb"+
    "\3\0\1\u01bb\5\0\2\u01bb\1\0\4\u01bb\23\0\12\u01bb"+
    "\1\0\1\u01bb\1\0\16\u01bb\2\0\5\u01bb\3\0\1\u01bb"+
    "\5\0\2\u01bb\1\0\4\u01bb\14\0\1\u01bc\6\0\12\u01bb"+
    "\1\0\1\u01bb\1\0\16\u01bb\36\0\1\u01bd\70\0\1\u0165"+
    "\5\0\1\u0171\7\0\1\u01be\100\0\1\u01b9\27\0\1\u0159"+
    "\56\0\1\u01bf\75\0\1\u0159\123\0\1\u0169\40\0\5\u01bb"+
    "\3\0\1\u01bb\5\0\2\u01bb\1\0\4\u01bb\2\0\1\u0159"+
    "\20\0\12\u01bb\1\0\1\u01bb\1\0\16\u01bb\31\0\1\u01c0"+
    "\13\0\1\u01c1\1\u01c2\67\0\1\u01c3\55\0\5\u01bb\3\0"+
    "\1\u01bb\3\0\1\u0159\1\0\2\u01bb\1\0\4\u01bb\23\0"+
    "\12\u01bb\1\0\1\u01bb\1\0\16\u01bb\33\0\1\u0159\103\0"+
    "\1\u01c4\103\0\1\u01c5\120\0\1\u0159\105\0\1\u0159\66\0"+
    "\1\u0163\72\0\1\u01c6\27\0\1\u01c7\67\0\1\u0159\106\0"+
    "\1\u01c8\102\0\1\u01c3\11\0\1\u01b9\102\0\1\u01c9\65\0"+
    "\1\u01ca\125\0\1\u0159\107\0\1\u0173\44\0\1\u01cb\73\0"+
    "\1\u01cb\15\0\1\352\71\0\1\352\7\0\1\352\2\0"+
    "\1\352\2\0\2\352\2\0\1\352\16\0\1\352\3\0"+
    "\1\352\1\0\2\352\34\0\1\352\7\0\1\354\2\0"+
    "\1\354\2\0\2\354\2\0\1\354\16\0\1\354\3\0"+
    "\1\354\1\0\2\354\34\0\1\354\1\0\1\u0177\1\0"+
    "\1\u0177\1\0\101\u0177\26\0\1\u01cc\4\0\1\u01cc\26\0"+
    "\1\u01cc\21\0\1\u01cc\26\0\1\u01cd\4\0\1\u01cd\26\0"+
    "\1\u01cd\21\0\1\u01cd\37\0\1\u01ce\112\0\1\u01cf\72\0"+
    "\1\376\71\0\1\u01d0\104\0\1\376\130\0\1\u017e\67\0"+
    "\1\u01d1\112\0\1\u01d2\104\0\1\u0104\67\0\1\u01d3\112\0"+
    "\1\u010e\76\0\1\u01d4\104\0\1\u018d\131\0\1\u01d5\57\0"+
    "\1\u01d6\116\0\1\u01d7\111\0\1\u01d8\65\0\1\u01d9\113\0"+
    "\1\u01da\116\0\1\u0116\102\0\1\u01db\52\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\17\25\1\u01dc\3\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\25\1\0\1\25\1\221\1\0\2\25\1\u01dd"+
    "\20\25\12\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\11\25\2\0\1\25\1\0\1\25\1\221\1\0\4\25"+
    "\1\u01de\16\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\11\25\2\0\1\25\1\0\1\25\1\221\1\0"+
    "\11\25\1\u01df\11\25\12\0\1\25\1\0\1\25\16\0"+
    "\2\25\5\0\11\25\2\0\1\25\1\0\1\25\1\221"+
    "\1\0\2\25\1\u01e0\20\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\5\0\11\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\16\25\1\u01e1\4\25\12\0\1\25\1\0"+
    "\1\25\16\0\2\25\5\0\11\25\2\0\1\25\1\0"+
    "\1\25\1\221\1\0\14\25\1\u01e2\6\25\12\0\1\25"+
    "\1\0\1\25\16\0\2\25\5\0\11\25\2\0\1\25"+
    "\1\0\1\25\1\221\1\0\1\25\1\u01e3\21\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\4\25\1\u01e4\16\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\u01e5\1\0\1\25\1\221\1\0\23\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\12\25\1\u01e6\10\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\25\1\0\1\25\1\221\1\0\11\25\1\277"+
    "\11\25\12\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\11\25\2\0\1\25\1\0\1\25\1\221\1\0\1\u01e7"+
    "\22\25\12\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\11\25\2\0\1\25\1\0\1\25\1\221\1\0\10\25"+
    "\1\u01e8\12\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\11\25\2\0\1\25\1\0\1\25\1\221\1\0"+
    "\13\25\1\u01e9\7\25\12\0\1\25\1\0\1\25\16\0"+
    "\2\25\5\0\11\25\2\0\1\25\1\0\1\25\1\221"+
    "\1\0\17\25\1\u01ea\3\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\5\0\7\25\1\u01eb\1\25\2\0\1\25"+
    "\1\0\1\25\1\221\1\0\23\25\12\0\1\25\1\0"+
    "\1\25\16\0\2\25\5\0\11\25\2\0\1\25\1\0"+
    "\1\25\1\221\1\0\14\25\1\u01ec\6\25\12\0\1\25"+
    "\1\0\1\25\16\0\2\25\5\0\11\25\2\0\1\25"+
    "\1\0\1\25\1\221\1\0\3\25\1\u011e\17\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\11\25\1\u01ed\11\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\25\1\0\1\25\1\221\1\0\11\25\1\u01ee"+
    "\11\25\12\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\11\25\2\0\1\25\1\0\1\25\1\221\1\0\20\25"+
    "\1\u01ef\2\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\11\25\2\0\1\25\1\0\1\25\1\221\1\0"+
    "\5\25\1\u01f0\15\25\12\0\1\25\1\0\1\25\16\0"+
    "\2\25\5\0\11\25\2\0\1\25\1\0\1\25\1\221"+
    "\1\0\2\25\1\u01f1\20\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\5\0\11\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\1\25\1\u01f2\21\25\12\0\1\25\1\0"+
    "\1\25\16\0\2\25\5\0\11\25\2\0\1\25\1\0"+
    "\1\25\1\221\1\0\3\25\1\u01f3\17\25\12\0\1\25"+
    "\1\0\1\25\16\0\2\25\5\0\11\25\2\0\1\25"+
    "\1\0\1\25\1\221\1\0\14\25\1\u01f4\6\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\23\25\12\0\1\25"+
    "\1\0\1\u01f5\16\0\2\25\37\0\1\u01f6\112\0\1\u01f7"+
    "\72\0\1\u0159\71\0\1\u01f8\104\0\1\u0159\130\0\1\u01b9"+
    "\67\0\1\u01f9\112\0\1\u01fa\104\0\1\u015f\67\0\1\u01fb"+
    "\112\0\1\u0169\76\0\1\u01fc\104\0\1\u01c9\131\0\1\u01fd"+
    "\57\0\1\u01fe\116\0\1\u01ff\111\0\1\u0200\65\0\1\u0201"+
    "\113\0\1\u0202\116\0\1\u0171\102\0\1\u0203\73\0\1\u0204"+
    "\4\0\1\u0204\26\0\1\u0204\21\0\1\u0204\44\0\1\u0205"+
    "\67\0\1\u0206\106\0\1\u0207\112\0\1\u0208\103\0\1\u0111"+
    "\103\0\1\u0209\63\0\1\u020a\120\0\1\376\112\0\1\u020b"+
    "\104\0\1\u010a\100\0\1\u020c\101\0\1\u017e\103\0\1\u020d"+
    "\142\0\1\376\25\0\11\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\17\25\1\u020e\3\25\12\0\1\25\1\0"+
    "\1\25\16\0\2\25\5\0\11\25\2\0\1\25\1\0"+
    "\1\25\1\221\1\0\1\25\1\u020f\21\25\12\0\1\25"+
    "\1\0\1\25\16\0\2\25\5\0\11\25\2\0\1\25"+
    "\1\0\1\25\1\221\1\0\16\25\1\u0210\4\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\2\25\1\u0196\20\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\u0211\1\0\1\25\1\221\1\0\23\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\u0212\1\0\1\25\1\221\1\0\23\25\12\0\1\25"+
    "\1\0\1\25\16\0\2\25\5\0\11\25\2\0\1\25"+
    "\1\0\1\25\1\221\1\0\15\25\1\u0213\5\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\20\25\1\u01e9\2\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\25\1\0\1\25\1\221\1\0\16\25\1\u0196"+
    "\4\25\12\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\11\25\2\0\1\25\1\0\1\25\1\221\1\0\4\25"+
    "\1\u0214\16\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\7\25\1\u0215\1\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\23\25\12\0\1\25\1\0\1\25\16\0"+
    "\2\25\5\0\11\25\2\0\1\u0196\1\0\1\25\1\221"+
    "\1\0\23\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\11\25\2\0\1\25\1\0\1\25\1\221\1\0"+
    "\1\25\1\u0216\21\25\12\0\1\25\1\0\1\25\16\0"+
    "\2\25\5\0\11\25\2\0\1\25\1\0\1\25\1\221"+
    "\1\0\14\25\1\u0217\6\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\5\0\11\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\1\u0218\22\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\5\0\11\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\4\25\1\u0219\16\25\12\0\1\25\1\0"+
    "\1\25\16\0\2\25\5\0\11\25\2\0\1\25\1\0"+
    "\1\25\1\221\1\0\3\25\1\u021a\17\25\12\0\1\25"+
    "\1\0\1\25\16\0\2\25\5\0\11\25\2\0\1\25"+
    "\1\0\1\25\1\221\1\0\17\25\1\u021b\3\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\276\1\0\1\25\1\221\1\0\23\25\12\0\1\25"+
    "\1\0\1\25\16\0\2\25\5\0\11\25\2\0\1\25"+
    "\1\0\1\25\1\221\1\0\4\25\1\u021c\16\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\44\0\1\u021d\67\0"+
    "\1\u021e\106\0\1\u021f\112\0\1\u0220\103\0\1\u016c\103\0"+
    "\1\u0221\63\0\1\u0222\120\0\1\u0159\112\0\1\u0223\104\0"+
    "\1\u0165\100\0\1\u0224\101\0\1\u01b9\103\0\1\u0225\142\0"+
    "\1\u0159\64\0\1\u0226\66\0\1\u0227\121\0\1\u0116\72\0"+
    "\1\u0228\101\0\1\u0229\103\0\1\u022a\123\0\1\u0111\71\0"+
    "\1\u022b\60\0\11\25\2\0\1\25\1\0\1\25\1\221"+
    "\1\0\23\25\12\0\1\u022c\1\0\1\25\16\0\2\25"+
    "\5\0\11\25\2\0\1\25\1\0\1\25\1\221\1\0"+
    "\10\25\1\265\12\25\12\0\1\25\1\0\1\25\16\0"+
    "\2\25\5\0\11\25\2\0\1\25\1\0\1\25\1\221"+
    "\1\0\14\25\1\u022d\6\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\5\0\11\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\4\25\1\u022e\16\25\12\0\1\25\1\0"+
    "\1\25\16\0\2\25\5\0\5\25\1\u022f\3\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\23\25\12\0\1\25"+
    "\1\0\1\25\16\0\2\25\5\0\11\25\2\0\1\25"+
    "\1\0\1\25\1\221\1\0\11\25\1\u0230\11\25\12\0"+
    "\1\25\1\0\1\25\16\0\2\25\5\0\11\25\2\0"+
    "\1\25\1\0\1\25\1\221\1\0\20\25\1\u0231\2\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25\5\0\11\25"+
    "\2\0\1\25\1\0\1\25\1\u0131\1\0\23\25\5\0"+
    "\1\u0232\4\0\1\25\1\0\1\25\16\0\2\25\5\0"+
    "\11\25\2\0\1\25\1\0\1\25\1\221\1\0\4\25"+
    "\1\u0233\16\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\11\25\2\0\1\25\1\0\1\25\1\221\1\0"+
    "\1\25\1\u0234\21\25\12\0\1\25\1\0\1\25\16\0"+
    "\2\25\5\0\11\25\2\0\1\25\1\0\1\25\1\221"+
    "\1\0\2\25\1\u0197\20\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\5\0\11\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\5\25\1\u0235\15\25\12\0\1\25\1\0"+
    "\1\25\16\0\2\25\44\0\1\u0236\66\0\1\u0237\121\0"+
    "\1\u0171\72\0\1\u0238\67\0\1\u0159\116\0\1\u0239\103\0"+
    "\1\u023a\123\0\1\u016c\71\0\1\u023b\135\0\1\376\57\0"+
    "\1\u010a\114\0\1\u0183\70\0\1\u023c\101\0\1\374\110\0"+
    "\1\u017e\57\0\11\25\2\0\1\25\1\0\1\25\1\221"+
    "\1\0\16\25\1\u023d\4\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\5\0\11\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\22\25\1\u023e\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\5\0\11\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\10\25\1\u023f\12\25\12\0\1\25\1\0"+
    "\1\25\16\0\2\25\5\0\11\25\2\0\1\u0240\1\0"+
    "\1\25\1\221\1\0\23\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\5\0\11\25\2\0\1\u0241\1\0\1\25"+
    "\1\221\1\0\23\25\12\0\1\25\1\0\1\25\16\0"+
    "\2\25\5\0\11\25\2\0\1\25\1\0\1\25\1\221"+
    "\1\0\14\25\1\u0242\6\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\5\0\11\25\2\0\1\u0243\1\0\1\25"+
    "\1\221\1\0\23\25\12\0\1\25\1\0\1\25\16\0"+
    "\2\25\62\0\1\u0159\57\0\1\u0165\114\0\1\u01bf\70\0"+
    "\1\u0244\101\0\1\u0157\110\0\1\u01b9\72\0\1\u010d\71\0"+
    "\11\25\2\0\1\25\1\0\1\25\1\221\1\0\14\25"+
    "\1\u0196\6\25\12\0\1\25\1\0\1\25\16\0\2\25"+
    "\5\0\7\25\1\u0196\1\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\23\25\12\0\1\25\1\0\1\25\16\0"+
    "\2\25\5\0\11\25\2\0\1\25\1\0\1\25\1\221"+
    "\1\0\7\25\1\u0196\13\25\12\0\1\25\1\0\1\25"+
    "\16\0\2\25\5\0\11\25\2\0\1\25\1\0\1\25"+
    "\1\221\1\0\10\25\1\u0245\12\25\12\0\1\25\1\0"+
    "\1\25\16\0\2\25\5\0\11\25\2\0\1\25\1\0"+
    "\1\25\1\221\1\0\16\25\1\267\4\25\12\0\1\25"+
    "\1\0\1\25\16\0\2\25\5\0\11\25\2\0\1\u011e"+
    "\1\0\1\25\1\221\1\0\23\25\12\0\1\25\1\0"+
    "\1\25\16\0\2\25\20\0\1\u0168\71\0\7\25\1\u0246"+
    "\1\25\2\0\1\25\1\0\1\25\1\221\1\0\23\25"+
    "\12\0\1\25\1\0\1\25\16\0\2\25";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33120];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\20\0\2\11\16\1\1\11\32\1\1\11\3\1\1\11"+
    "\1\1\5\11\1\1\2\11\2\1\1\11\1\1\1\11"+
    "\1\1\10\11\2\1\1\11\5\1\1\11\10\1\1\11"+
    "\2\1\5\11\2\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\2\1\1\11\23\1\3\0\1\1\1\0"+
    "\6\1\2\11\1\0\4\1\1\0\1\11\40\1\1\11"+
    "\1\0\2\11\3\1\1\11\2\0\2\11\24\0\1\11"+
    "\3\0\2\11\10\1\1\11\1\1\1\11\10\0\1\11"+
    "\1\1\6\0\1\1\2\0\1\1\15\0\2\1\1\0"+
    "\2\1\1\0\7\1\1\11\47\1\2\0\2\11\5\0"+
    "\1\11\36\0\6\1\26\0\1\1\1\11\42\1\1\11"+
    "\6\0\1\11\17\0\2\1\1\11\16\0\32\1\16\0"+
    "\1\11\11\0\17\1\17\0\6\1\1\11\3\1\7\0"+
    "\7\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[582];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

  private IElementType characterClassType;

  private final Stack<Integer> stack = new Stack<Integer>();

  /**
   * Push the actual state on top of the stack
   */
  private void pushState() {
    stack.push(yystate());
  }

  /**
   * Push the actual state on top of the stack
   * and change into another state
   *
   * @param state The new state
   */
  private void pushStateAndBegin(int state) {
    stack.push(yystate());
    yybegin(state);
  }

  /**
   * Pop the last state from the stack and change to it.
   * If the stack is empty, go to YYINITIAL
   */
  private void popState() {
    if (!stack.empty()) {
      yybegin(stack.pop());
    } else {
      yybegin(YYINITIAL);
    }
  }

  /**
   * Push the stream back to the position before the text match
   *
   * @param text The text to match
   * @return true when matched
   */
  private boolean pushBackTo(String text) {
    final int position = yytext().toString().indexOf(text);

    if (position != -1) {
      yypushback(yylength() - position);
      return true;
    }

    return false;
  }

  /**
   * Push the stream back to the position before the text match
   * and change into the given state
   *
   * @param text The text to match
   * @param state The new state
   * @return true when matched
   */
  private boolean pushBackAndState(String text, int state) {
    final boolean success = pushBackTo(text);

    if (success) {
      pushStateAndBegin(state);
    }

    return success;
  }



  public LiveScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LiveScriptLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { yybegin(YYSINGLEQUOTESTRING);
                                return LiveScriptTokenTypes.STRING_LITERAL;
          }
        case 114: break;
        case 61: 
          { return characterClassType;
          }
        case 115: break;
        case 83: 
          { pushStateAndBegin(YYINITIAL);
                                return LiveScriptTokenTypes.INTERPOLATION_START;
          }
        case 116: break;
        case 63: 
          { popState();
                                return LiveScriptTokenTypes.INTERPOLATION_END;
          }
        case 117: break;
        case 74: 
          { yybegin(YYHEREGEX);
                                return LiveScriptTokenTypes.HEREGEX_START;
          }
        case 118: break;
        case 62: 
          { popState();
                                return LiveScriptTokenTypes.REGEX_BRACKET_END;
          }
        case 119: break;
        case 24: 
          { pushState();
                                return LiveScriptTokenTypes.BRACE_START;
          }
        case 120: break;
        case 111: 
          { return LiveScriptTokenTypes.EXTENDS;
          }
        case 121: break;
        case 33: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.PLUS;
          }
        case 122: break;
        case 84: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.IDENTIFIER;
          }
        case 123: break;
        case 73: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(YYREGEX);
                                return LiveScriptTokenTypes.REGEX_START;
          }
        case 124: break;
        case 64: 
          { yybegin(YYCLASSNAME);
                                return LiveScriptTokenTypes.CLASS_NAME;
          }
        case 125: break;
        case 7: 
          { yybegin(YYIDENTIFIER);
                                return LiveScriptTokenTypes.CONSTANT;
          }
        case 126: break;
        case 12: 
          { return LiveScriptTokenTypes.COMPARE;
          }
        case 127: break;
        case 51: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(YYREGEXFLAG);
                                return LiveScriptTokenTypes.REGEX_END;
          }
        case 128: break;
        case 4: 
          { return LiveScriptTokenTypes.WHITE_SPACE;
          }
        case 129: break;
        case 39: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.BRACKET_END;
          }
        case 130: break;
        case 31: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.MINUS;
          }
        case 131: break;
        case 37: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.MATH;
          }
        case 132: break;
        case 100: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.RANGE;
          }
        case 133: break;
        case 102: 
          { return LiveScriptTokenTypes.THROW;
          }
        case 134: break;
        case 3: 
          { yybegin(YYBACKSLASHQUOTESTRING);
                                return LiveScriptTokenTypes.STRING_LITERAL;
          }
        case 135: break;
        case 92: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.SPLAT;
          }
        case 136: break;
        case 1: 
          { stack.clear();
                                yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.BAD_CHARACTER;
          }
        case 137: break;
        case 58: 
          { characterClassType = LiveScriptTokenTypes.HEREGEX;
                                pushStateAndBegin(YYREGEXCHARACTERCLASS);
                                return LiveScriptTokenTypes.REGEX_BRACKET_START;
          }
        case 138: break;
        case 108: 
          { return LiveScriptTokenTypes.RETURN;
          }
        case 139: break;
        case 49: 
          { pushBackTo("'''");
                                return LiveScriptTokenTypes.HEREDOC;
          }
        case 140: break;
        case 103: 
          { return LiveScriptTokenTypes.UNTIL;
          }
        case 141: break;
        case 8: 
          { return LiveScriptTokenTypes.MINUS;
          }
        case 142: break;
        case 38: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.BRACKET_START;
          }
        case 143: break;
        case 82: 
          { yypushback(2);
                                pushStateAndBegin(YYINTERPOLATION);
          }
        case 144: break;
        case 87: 
          { return LiveScriptTokenTypes.SPLAT;
          }
        case 145: break;
        case 54: 
          { return LiveScriptTokenTypes.REGEX_PARENTHESIS_END;
          }
        case 146: break;
        case 109: 
          { return LiveScriptTokenTypes.SWITCH;
          }
        case 147: break;
        case 98: 
          { return LiveScriptTokenTypes.BLOCK_COMMENT;
          }
        case 148: break;
        case 22: 
          { return LiveScriptTokenTypes.PARENTHESIS_START;
          }
        case 149: break;
        case 50: 
          { return LiveScriptTokenTypes.REGEX;
          }
        case 150: break;
        case 29: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.TERMINATOR;
          }
        case 151: break;
        case 68: 
          { return LiveScriptTokenTypes.IN;
          }
        case 152: break;
        case 97: 
          { return LiveScriptTokenTypes.WHEN;
          }
        case 153: break;
        case 94: 
          { if (pushBackTo("::")) {
                                  yybegin(YYCLASSNAME);
                                  return LiveScriptTokenTypes.CLASS_NAME;
                                }
                                pushBackTo(":");
                                return LiveScriptTokenTypes.FUNCTION_NAME;
          }
        case 154: break;
        case 15: 
          { return LiveScriptTokenTypes.UNARY;
          }
        case 155: break;
        case 9: 
          { return LiveScriptTokenTypes.DOT;
          }
        case 156: break;
        case 55: 
          { return LiveScriptTokenTypes.REGEX_BRACE_START;
          }
        case 157: break;
        case 107: 
          { return LiveScriptTokenTypes.UNLESS;
          }
        case 158: break;
        case 81: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(YYREGEXFLAG);
                                return LiveScriptTokenTypes.HEREGEX_END;
          }
        case 159: break;
        case 70: 
          { return LiveScriptTokenTypes.OF;
          }
        case 160: break;
        case 101: 
          { return LiveScriptTokenTypes.WHILE;
          }
        case 161: break;
        case 10: 
          { return LiveScriptTokenTypes.PLUS;
          }
        case 162: break;
        case 14: 
          { return LiveScriptTokenTypes.EQUAL;
          }
        case 163: break;
        case 90: 
          { yybegin(YYDOUBLEQUOTEHEREDOC);
                                return LiveScriptTokenTypes.HEREDOC_START;
          }
        case 164: break;
        case 88: 
          { yypushback(1);
                                return LiveScriptTokenTypes.IDENTIFIER;
          }
        case 165: break;
        case 46: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.STRING_LITERAL;
          }
        case 166: break;
        case 69: 
          { return LiveScriptTokenTypes.BOOL;
          }
        case 167: break;
        case 112: 
          { return LiveScriptTokenTypes.CONTINUE;
          }
        case 168: break;
        case 85: 
          { pushBackTo(":");
                                return LiveScriptTokenTypes.OBJECT_KEY;
          }
        case 169: break;
        case 99: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(YYQUOTEPROPERTY);
                                yypushback(yylength());
          }
        case 170: break;
        case 25: 
          { return LiveScriptTokenTypes.SEMICOLON;
          }
        case 171: break;
        case 75: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return LiveScriptTokenTypes.MATH;
          }
        case 172: break;
        case 16: 
          { return LiveScriptTokenTypes.MATH;
          }
        case 173: break;
        case 34: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.COLON;
          }
        case 174: break;
        case 52: 
          { characterClassType = LiveScriptTokenTypes.REGEX;
                                pushStateAndBegin(YYREGEXCHARACTERCLASS);
                                return LiveScriptTokenTypes.REGEX_BRACKET_START;
          }
        case 175: break;
        case 113: 
          { return LiveScriptTokenTypes.INSTANCE_OF;
          }
        case 176: break;
        case 77: 
          { yybegin(YYJAVASCRIPT);
                                return LiveScriptTokenTypes.JAVASCRIPT_LITERAL;
          }
        case 177: break;
        case 32: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.DOT;
          }
        case 178: break;
        case 65: 
          { return LiveScriptTokenTypes.FUNCTION;
          }
        case 179: break;
        case 36: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.BANG;
          }
        case 180: break;
        case 11: 
          { return LiveScriptTokenTypes.COLON;
          }
        case 181: break;
        case 67: 
          { return LiveScriptTokenTypes.IF;
          }
        case 182: break;
        case 53: 
          { return LiveScriptTokenTypes.REGEX_PARENTHESIS_START;
          }
        case 183: break;
        case 40: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.PARENTHESIS_START;
          }
        case 184: break;
        case 106: 
          { return LiveScriptTokenTypes.BREAK;
          }
        case 185: break;
        case 21: 
          { return LiveScriptTokenTypes.BRACKET_END;
          }
        case 186: break;
        case 60: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.REGEX_FLAG;
          }
        case 187: break;
        case 95: 
          { return LiveScriptTokenTypes.ERROR_ELEMENT;
          }
        case 188: break;
        case 47: 
          { return LiveScriptTokenTypes.STRING;
          }
        case 189: break;
        case 27: 
          { return LiveScriptTokenTypes.LINE_COMMENT;
          }
        case 190: break;
        case 41: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.PARENTHESIS_END;
          }
        case 191: break;
        case 44: 
          { yypushback(yytext().length());
                                yybegin(YYINITIAL);
          }
        case 192: break;
        case 30: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.WHITE_SPACE;
          }
        case 193: break;
        case 79: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.JAVASCRIPT_LITERAL;
          }
        case 194: break;
        case 48: 
          { if (!pushBackAndState("#{", YYINTERPOLATION)) {
                                  pushBackTo("\"\"\"");
                                }
                                if (yylength() != 0) {
                                  return LiveScriptTokenTypes.HEREDOC;
                                }
          }
        case 195: break;
        case 56: 
          { return LiveScriptTokenTypes.REGEX_BRACE_END;
          }
        case 196: break;
        case 93: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.HEREDOC_END;
          }
        case 197: break;
        case 91: 
          { yybegin(YYSINGLEQUOTEHEREDOC);
                                return LiveScriptTokenTypes.HEREDOC_START;
          }
        case 198: break;
        case 6: 
          { yybegin(YYNUMBER);
                                return LiveScriptTokenTypes.NUMBER;
          }
        case 199: break;
        case 86: 
          { return LiveScriptTokenTypes.FOR;
          }
        case 200: break;
        case 42: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.COMMA;
          }
        case 201: break;
        case 13: 
          { return LiveScriptTokenTypes.LOGIC;
          }
        case 202: break;
        case 71: 
          { return LiveScriptTokenTypes.BY;
          }
        case 203: break;
        case 78: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.PROTOTYPE;
          }
        case 204: break;
        case 43: 
          { return LiveScriptTokenTypes.JAVASCRIPT;
          }
        case 205: break;
        case 20: 
          { return LiveScriptTokenTypes.BRACKET_START;
          }
        case 206: break;
        case 110: 
          { return LiveScriptTokenTypes.FINALLY;
          }
        case 207: break;
        case 80: 
          { return LiveScriptTokenTypes.ESCAPE_SEQUENCE;
          }
        case 208: break;
        case 57: 
          { pushBackTo("//");
                                if (yylength() != 0) {
                                  return LiveScriptTokenTypes.HEREGEX;
                                }
          }
        case 209: break;
        case 104: 
          { return LiveScriptTokenTypes.CATCH;
          }
        case 210: break;
        case 26: 
          { return LiveScriptTokenTypes.COMMA;
          }
        case 211: break;
        case 23: 
          { return LiveScriptTokenTypes.PARENTHESIS_END;
          }
        case 212: break;
        case 18: 
          { yybegin(YYDOUBLEQUOTESTRING);
                                return LiveScriptTokenTypes.STRING_LITERAL;
          }
        case 213: break;
        case 2: 
          { return LiveScriptTokenTypes.TERMINATOR;
          }
        case 214: break;
        case 96: 
          { return LiveScriptTokenTypes.ELSE;
          }
        case 215: break;
        case 28: 
          { popState();
                                if (yystate() == YYINITIAL) {
                                  return LiveScriptTokenTypes.BRACE_END;
                                } else {
                                  yypushback(1);
                                }
          }
        case 216: break;
        case 35: 
          { yybegin(YYINITIAL);
                                return LiveScriptTokenTypes.EXIST;
          }
        case 217: break;
        case 89: 
          { return LiveScriptTokenTypes.TRY;
          }
        case 218: break;
        case 76: 
          { return LiveScriptTokenTypes.FUNCTION_BIND;
          }
        case 219: break;
        case 5: 
          { yybegin(YYIDENTIFIER);
                                return LiveScriptTokenTypes.IDENTIFIER;
          }
        case 220: break;
        case 72: 
          { return LiveScriptTokenTypes.THEN;
          }
        case 221: break;
        case 59: 
          { yybegin(YYINITIAL);
                                yypushback(1);
          }
        case 222: break;
        case 45: 
          { pushBackAndState("#{", YYINTERPOLATION);
                                if (yylength() != 0) {
                                  return LiveScriptTokenTypes.STRING;
                                }
          }
        case 223: break;
        case 105: 
          { return LiveScriptTokenTypes.CLASS;
          }
        case 224: break;
        case 17: 
          { return LiveScriptTokenTypes.THIS;
          }
        case 225: break;
        case 66: 
          { return LiveScriptTokenTypes.COMPOUND_ASSIGN;
          }
        case 226: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
